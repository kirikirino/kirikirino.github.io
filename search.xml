<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用 BGmi 可视化自动追番]]></title>
    <url>%2Fp%2F8243.html</url>
    <content type="text"><![CDATA[第 7 章和第 8 章是计划要弄的内容，但是自己技术实在不够，多长时间能搞定我心里也没底 按照目前本文的内容进度，订阅追番自动下载其实是没问题的 bgmi_http 使用的是 DPlayer ，正常观看也没问题，而且还支持弹幕。 0 前言其实我之前是用 µTorrent 配合 RSS 订阅来实现自动下载新番动画的，方法可以看我上一篇文章 利用 µTorrent 实现自动下载新番 。 但是在将方法整理出来分享之后，推友 @Agniwithyou 提出的一些建议让我想折腾的心又活络了起来，于是开始在网上找寻利用 aria2 来自动订阅新番动画的方法，于是就找到了这个新玩具（笑），看上去非常有趣而且和我的需求基本重叠。 BGmi 特性： 多个数据源可选: bangumi_moe, mikan_project 或者dmhy 使用 aria2, transmission 或者deluge来下载你的番剧. 提供一个管理和观看订阅番剧的前端. 弹幕支持 提供uTorrent支持的RSS Feed和移动设备支持的ICS格式日历. Bangumi Script: 添加自己的番剧解析器 番剧放松列表和剧集信息 下载番剧时的过滤器(支持关键词,字幕组和正则) 多平台支持: Windows, *nux 以及 Router system 1 安装 Python3这个项目需要 Python 环境和 pip 工具，而且作者也已经提及目前的版本为最后一个支持 Python2 的版本，所以这里果断选择安装 Python3。 首先下载 Python 包 ，双击安装 → 勾选 Add Python 3.x to PATH → Customize Installation，确认勾选 pip 工具 → Next（这里可以更改安装路径） → Next 完成安装。 打开 CMD ，输入 pip ，显示如下即表示安装成功。 2 安装 BGmi打开 CMD，输入正确的命令行则可以完成安装，这里官方提供了以下两种安装方式： 方法 ① 123::使用pip安装稳定版本（这行是注释内容）pip install bgmibgmi install 方法 ② 123::从Github安装最新版本（这行是注释内容）pip install https://github.com/Bgmi/BGmi/tarball/devbgmi install 如果需要升级的话，可以运行如下命令行： 12pip install bgmi -Ubgmi upgrade 3 安装 Aria2 这部分主要参考这篇文章：Windows 下如何配置 Aria 2 首先下载 Aria2 最新版 。 解压到本地文件夹中，并在该目录下新建四个空文件： Aria2.log （日志，空文件就行） aria2.session （下载历史，空文件就行） aria2.conf （配置文件） HideRun.vbs （隐藏cmd窗口运行用到的） 然后打开 aria2.conf ，复制以下内容到该文件（前四段需要根据自己情况进行修改）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105/* 下载文件保存路径设置 */dir=D:\Download\/* 刚刚自己新建的空日志文件，这里改为对应的路径 */log=D:\Aria2\Aria2.log/* 刚刚自己新建的空下载历史文件，这里改为对应的路径 */input-file=D:\Aria2\aria2.session/* 刚刚自己新建的空下载历史文件，这里改为对应的路径 */save-session=D:\Aria2\aria2.sessionsave-session-interval=60force-save=truelog-level=error# see --split optionmax-concurrent-downloads=5continue=truemax-overall-download-limit=0max-overall-upload-limit=50Kmax-upload-limit=20# Http/FTP optionsconnect-timeout=120lowest-speed-limit=10Kmax-connection-per-server=10max-file-not-found=2min-split-size=1Msplit=5check-certificate=falsehttp-no-cache=true# FTP Specific Options# BT/PT Settingbt-enable-lpd=true#bt-max-peers=55follow-torrent=trueenable-dht6=falsebt-seed-unverifiedrpc-save-upload-metadata=truebt-hash-check-seedbt-remove-unselected-filebt-request-peer-speed-limit=100Kseed-ratio=0.0# Metalink Specific Options# RPC Optionsenable-rpc=truepause=falserpc-allow-origin-all=truerpc-listen-all=truerpc-save-upload-metadata=truerpc-secure=false# Advanced Optionsdaemon=truedisable-ipv6=trueenable-mmap=truefile-allocation=falloc max-download-result=120#no-file-allocation-limit=32Mforce-sequential=trueparameterized-uri=true 然后是 HideRun.vbs 文件的修改，复制以下内容到该文件（修改 D:\Aria2\ 为你的 Aria2 安装路径）： 1CreateObject("WScript.Shell").Run "D:\Aria2\aria2c.exe --conf-path=aria2.conf",0 到这里其实就可以通过双击 HideRun.vbs 来正常运行的 Aria2 了，但是我需要一个图形化客户端，所以继续。 创建一个 HideRun.vbs 文件的快捷方式，放到 C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp 中，保持 Aria2 开机启动。 其实到这里 Aria2 的部分就已经算是结束了，可以直接在网页中打开 Aria2 的WebUI 查看，但是如果需要一个图形化的客户端的话， AriaNg Native 最新版 可以满足你的需求（Windows 下载的 exe 文件推荐用解压缩文件解压后运行里面的 AriaNg.exe）。 4 配置 BGmi打开 CMD ，我们的主要操作基本都是在这里进行的。 首先输入如下命令行，修改下载地址： 1bgmi config SAVE_PATH '下载地址路径（直接写路径，不需要引号）' 然后输入如下命令行，选择数据源： 1bgmi source '数据源名字（直接写，不需要引号）' 这里说一下 BGmi 支持的三个源： bangumi_moe ：默认数据源 mikan_project ：感觉资源比上面那个多一些 dmhy ： 不推荐， BGmi 根据数据源生成播放日历，而动漫花园的日历数据差开了一个季度 然后因为我不打算使用 Nnginx 所以要进行如下设置： 1bgmi config TORNADO_SERVE_STATIC_FILES 1 5 开启 bgmi_http 前端打开 CMD ，输入如下命令行下载所有更新中番剧的封面： 1bgmi cal --download-cover 新建文件 BGmi.bat ，输入如下内容： 12345@echo offif "%1" == "h" goto beginmshta vbscript:createobject("wscript.shell").run("""%~0"" h",0)(window.close)&amp;&amp;exit:beginbgmi_http --port=8888 --address=0.0.0.0 新建文件 hello.vbs ，输入如下内容： 12/* D:/BGmi/BGmi.bat 为上文新建的 BGmi.bat 绝对路径，根据自己实际情况更改 */CreateObject("WScript.Shell").Run "cmd /c D:/BGmi/BGmi.bat",0 将 hello.vbs 放到 C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp 中，保持其开机启动。 然后访问 http://localhost:8888/ 即可看到 BGmi 的前端页面了。 6 订阅新番打开 CMD，输入如下命令行查看当前各项设置默认值： 1bgmi config 查看 ADMIN_TOKEN 的默认值并复制。 在 BGmi 前端页面中，点击 subscribe 按钮，将刚刚复制的 ADMIN_TOKEN 的默认值粘贴到这里。 这样就可以使用前端页面来订阅新番动画并设定筛选条件了。 选中想要订阅的新番动画，点击 ADD 添加订阅，之后再点击 DETAIL 设定订阅筛选条件。 include ：包含的关键词，多个关键词用 “,” 连接 exclude：不包含的关键词，多个关键词用 “,” 连接 regex：使用正则表达式 Episode：目前已看完的集数 点击 SAVE 保存设置，或者点击 DELETE 删除订阅。 当然，为了订阅准确，有些时候可能需要查看一下列表确认一下，这种时候我们需要打开 CMD，输入如下命令行： 12/* 查找该动画的资源在设定的筛选条件下可以搜索的资源，引号中写动画的名字 */bgmi fetch "家有女友" 调整好订阅内容和筛选条件后，可以点击右上角的 UPDATE 按钮，勾选 download ，点击 OK 开始更新。 之后的更新并不一定要手动去点击，因为 BGmi 集成了定时任务，会自动下载和更新新番动画。 7 bgmi_http 美化8 在 bgmi_http 中调用本地视频播放器]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>自动追番</tag>
        <tag>BGmi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用 µTorrent 实现自动下载新番]]></title>
    <url>%2Fp%2F4222.html</url>
    <content type="text"><![CDATA[1 准备工具1.1 µTorrentµTorrent 是一个用 C++ 语言写成的 BitTorrent 客户端免费软件，并且支持中文界面。 µTorrent 因为其特别的设置、表现、稳定性和对老旧硬件以及旧版 Windows 的支持受到许多一致的好评。 我选择这个软件作为下载器原因很简单，支持 RSS 订阅下载的软件我就找到 µTorrent 和 qBittorrent 这两个， 两个我都用过一段时间后感觉上 µTorrent 更稳定些所以最后决定用这款软件。 下载的话，首先 进入官网 ，往下滑动，下载下图中这个版本的软件，不要下载第一个网络版。 1.2 动漫花园知名动画资源网站 ，各个字幕组都会在上面发布新的动画资源，而且支持 RSS 订阅。 这里日常悼念下曾经的极影。 2 获取订阅链接其实这步非常简单，只要在动漫花园的搜索栏中添加足够多的关键词，把搜索结果精确的缩小到自己需要的范围，这里我用本季热门动画 五等分的花嫁 来举个栗子。 这里我在搜索栏输入的内容是 五等分的花嫁 桜都字幕組 1080 简 以空格分隔开的四个关键词。 以我的习惯通常键入这几种类型的关键词就能得到自己想要的结果： 动画名：这个不用多说，用来确定下载的动画 字幕组名：先确认这个动画哪些组在做，然后挑出一个中意的字幕组，毕竟不是每个组都做这个动画 分辨率：现在的新番通常有 720P 和 1080P 可选，这里添加关键词缩小订阅范围 简繁体：中文存在简体繁体的区别，这里需要添加关键词继续缩小订阅范围 简体中文可能涉及的关键词：简 | 简体 | GB | CHS 繁体中文可能涉及的关键词：繁 | 繁体 | GIB5 | CHT 在确认搜索结果已经缩小到自己需要的范围后，点击右上角的 订阅这个分类 ，这个时候网页会变成一页的代码，不要慌，把这个网页的网址复制下来就好，这就是需要的订阅链接。 3 在 µTorrent 中订阅打开 µTorrent 后，在左侧找到 订阅 按钮，右键 → 添加 RSS 订阅 ，在弹出的对话框中找到 订阅 URL 字段，将刚刚获得的订阅链接粘贴进去，然后在 自定别名 字段给这个订阅取个名字（个人建议就用订阅的动画名比较好，便于区分）。最后，一定要记得选择的是 不要自动下载所有项目 ，自动下载的部分会在后面设置。好，点击确定 进入下一步。 快捷键 Ctrl+R ，调出 RSS 下载器 ，左下方 添加 点一下，会出现一个 新建过滤器 ，点几下之后可以重命名，我个人习惯这里会明明为对应的动画名。然后这里，把 RSS 下载器关掉。 快捷键 Ctrl+R ，调出 RSS 下载器 ，先在左侧选中刚刚新建的过滤器，然后看右边的这些字段。在 过滤器 字段中输入 * ，保存在 字段可以设置保存位置，订阅 字段选中刚刚添加的 RSS 订阅（不选的话默认是全部 RSS 订阅都自动下载到上面设置的保存目录中），全部设置完之后大概长这样： 然后点击关闭 ，到这里实际上订阅就已经结束了，过段时间 µTorrent 会自动更新订阅然后开始下载，但是如果着急的话…… µTorrent 最左列 订阅 按钮，右键 → 更新订阅 ，可以手动刷新开始下载哟。 收工~]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>自动追番</tag>
        <tag>µTorrent</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019 冬季追番报告]]></title>
    <url>%2Fp%2F893e.html</url>
    <content type="text"><![CDATA[好，作为我 Blog 开业第一次追番报告，我还真不好意思说自己这个季度只打算追 13 部新番，而且其中两部为上季度的半年番，一部为已追动画续作，难道我真的要脱宅了吗？ 笨拙之极的上野 Tags：日常 | 恋爱 | 变态 一月新番，如果画风改变一下的话我可能就要在 Tags 里加上色情 了，然而这画风真的只适合用来搞笑了。 内容主要讲的是某中学的科学部部长上野恋慕着部内学弟田中，并每天使用异想天开发明品试图吸引田中的注意，手发多数脱离尝试进入了变态的领域，田中同学也非常称职的扮演着什么都不知道的正常少年。 这种轻松搞笑的动画还真适合下班的社畜放松心情呢。 不吉波普不笑 Tags：剧情 | 大作 | 悠木碧 一月新番，这季度大作好像不少，但是很多我都没追，因为大作剧情什么的，对于我这种社畜来说看着可能会比较累。追这番是因为一口气看了四集，讲故事的手法很棒，看着不累，而且没有无脑热血的角色制造噪音（笑）。 这故事讲的是少女宫下藤花，当她察觉到世界之敌的时候便会诞生出另一个名为不吉波普的人格。围绕着各种奇怪的事件，少年与少女们的故事慢慢展开了……喂，这个介绍等于全是废话吧。但是没办法，因为是多事件展开的剧情，真的要几句话介绍完也很难为人啊。 刀剑神域 Tags：刀剑神域 | 爱丽丝 | system call 上季度的半年番，说真的刀剑神域 这个 IP 本身就可以作为一个 Tag 了。 剧情啥的我就不介绍了，感觉随便拉出个观众都比我知道的多，刀剑神域的轻小说是我唯一买了实体书的一套，当然我肯定真是把他们摆在书架上而已根本没有读。 话说不是程序员看这个动画真的好吗？ 格林笔记 Tags：游戏改 | 爱丽丝 | 单元剧 一月新番，真巧啊又有一个爱丽丝（笑）。游戏改的动画啊一般来说粉丝向居多，虽然我开服的时候就玩过这个爆仓笔……抱歉说错了，开服的时候我就玩了原作游戏，但因为比较枯燥没多长时间就弃坑了。所以如果真要是粉丝向的动画作品那基本就和我没啥关系了。 剧情大概就是这个世界被分成无数个想区，每个想区都在重复着一个童话故事，每个人生下来就会被分配一个角色。但是这个时候出现了两种特例，一种是想解放故事中角色的人（反派），一种是没有被分配角色而且还想要维持每个故事进行的人（主角），然后他们就打了起来（误）。 比较惊讶的是这个动画居然在好好讲故事，真难得啊。单元剧的形式一集一个童话故事，将的故事也算中规中矩，作画也中规中矩，总体来讲观感不错哦。 关于我转生后成为史莱姆的那件事 Tags：爽文 | 满级玩家 | 新手村 上季度的半年番，满级玩家和新手村这两个 Tag 放在一起内容基本就不用介绍了吧。 说真的我都不知道我为啥追了这个，估计就是因为看着爽吧，不知道我死之后会转生成什么呢。 辉夜大小姐想让我告白 Tags：天才 | 笨蛋 | 秀恩爱 玛丽苏一样的设定，但剧情看着还是挺过瘾的。 故事说的是家里贼有钱的大小姐四宫辉夜副会长、学习贼好的白银御行与一般人天然呆的书记藤原千花，三个人热热闹闹的学生会内恋爱喜剧。 说真的，这番的缺点就是旁白太墨迹了，多余了。还有安利下第三集的 ED ，经费真的多到没地方用的感觉（笑）。 家有女友 Tags：国家欠我个姐姐 | 还欠我个妹妹 | 音乐满分 好各位再来看下这张图。处男男主在第一集联谊中与妹子一夜情后，因父亲再婚一夜情对象成为自己的妹妹，就是这么个剧情，好各位可以准备报警了。 好吧，这动画要演很多集呢，怎么可能一个妹子就结束嘛，所以父亲再婚而得到的不只有妹妹还有个姐姐，刚好是男主（此时已不是处男）喜欢的老师。呵，果然我还是在家等国家分配女朋友比较靠谱。 这动画发挥非常稳，作画和音乐都是上层，剧情发展也有趣，非常推荐看看。 狂赌之渊×× Tags：赌博 | 疯子 | 续作 一月新番，续作。 我不知道我为啥追这个，估计是因为追了前作就顺势……其实也不是说这个动画不好，音乐和作画上都挺不错的，但是剧情太扯了。女主基本上就是个赌博疯子，一路赌下来爽倒是挺爽，但是仔细想想也没啥意思。 临死！！江古田 Tags：泡面 泡面番，看了一集感觉挺有意思的，作为社畜感觉很真实的一个作品（笑）。 玛娜利亚魔法学院 Tags：Cygames | 游戏改 | 有钱真的可以为所欲为 游戏改，粉丝向，但是掩盖不了 CY 有钱的气息，作画精良的泡面番，剧情什么的无所谓啦，就这作画不追对得起谁啊？ 天使降临到了我身边 Tags：马修 | 五等份的死刑 | 废萌 萝莉番，废萌番，五等份的死刑，主角是马修。等一下，这个是百合展开吧！ 剧情讲的是怕生的御宅族女大学生宫子，为了和心目中天使般的小学生小花交朋友而展开的日常喜剧。 五等分的花嫁 Tags：五胞胎 | 三玖 | 水濑祈 常规多线操作开后宫的动画，剧情设定唯一的亮点就是这次的后宫是五胞胎，大家都熟悉操作起来应该有意思一些。 剧情就不介绍了，对于这种动画来说起点设定不是重点，事件展开后的操作才是看点（笑）。 烟草 Tags：末世 | たつき | 等超神 听说这个导演很有名，然而我没看动物朋友 ，所以这个动画对于我来说就是比较有趣的大作，等看后期剧本会不会超神吧。]]></content>
      <categories>
        <category>动画</category>
      </categories>
      <tags>
        <tag>追番报告</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五年设计三年装修]]></title>
    <url>%2Fp%2F88d6.html</url>
    <content type="text"><![CDATA[2019.2.13 背景交代首先交代下背景，单身的我有个清水房，家里虽然是打算把这个房子当作我的婚房来使用，但是我觉得几年内找到对象对我来说比较困难，索性就决定现在开始一点一点的设计和施工，把这个房子装修先解决了。 因为没有对象也没办法结婚，所以这个工程根本不着急，就像我标题写的那样，三五年内能完成我觉得就很不错了，设计是一方面，钱是一方面，嗯，主要说的话还是钱的问题比较大。 这篇文章会慢慢更新来记录装修的这个过程，想了想这个过程估计会非常漫长啊… 2019.2.14 量尺情人节，别人成双成对出去玩，我自己一个人在 17 楼量尺，想想就心酸。就在我这么想着的时候，还就下雪了，这天气真烘托出了我这单身狗的情人节气场（躺）。 好了好了，说正题吧。量尺这活一定要带一把好尺，如果能有个小伙伴帮忙就更好了，如果自己一个人的话还是建议搞一个红外线的尺，不然太长的墙不好量。笔的画细一点比较好，颜色最好超过一种。 不干室内设计一年半了，现在量尺画图啥的手特别生，直线啥的就别想了，最开始画的一张比例都没控制好，话玩里面根本没有写尺寸的地方。 2019.2.19 返尺又是个不错的节日，元宵佳节，我自己在家返尺，天公作美又来了一场小雪（笑）。 翻了好久找到了之前画施工图的时候做到一半的施工图布局模板，稍微改了一下图框，整理了一下图框。 在我快不干室内设计之前的时间里，我刚开始打算使用布局来画施工图，对应着设计布局施工图模板文件也是进行了一半，但是不干了之后就直接放置 PLAY 了。所以这次施工图画完的话，估计我当时想做的布局施工图模板就出来了。然而我已经不把这个作为工作了，所以感觉稍微有些遗憾啊，大概以后用不上了（毕竟我没钱再买个房子啊）。]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>装修</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[静态 Blog 搭建记事簿]]></title>
    <url>%2Fp%2Ff1e.html</url>
    <content type="text"><![CDATA[记得之前有人吐槽过每个静态 Blog 搭建完都要写一篇如何搭建 Blog 的文章，然后就弃坑不再写其他东西了。所以一开始说要写这种文章我是拒绝的。 可是真的折腾这么一圈之后，对于一个没啥编程基础的小白来说涉及的东西太多了，总归还是要找个地方整理记录一下，虽然教程有很多，但基本都做不到完美，每个人有每个人不同的需求，所以还是自己记录一下自己的事情吧。 1 事前准备Git工具用来提交代码的，好像还有其他用处但是一直没时间细研究，命令行什么的基本都是 google 到之后复制粘贴进去的，并没有什么难度。 Node.js这东西应该是环境的一种，安装了就好，不需要具体操作什么。 Atom这个感觉上大概是一个用来写代码的东西，当然也看到有人用这个来写 Markdown 文件，但是我试了下不是特别习惯，我下载他主要是用来改配置文件，这里提前说一下：不要用记事本去修改配置文件，因为如果在配置文件中需要加入中文的话，可能在网页中会现实乱码，虽然一些问题可以通过 另存为 - 更改编码为 UTF-8 - 覆盖 来解决，但是这个方法并不适用于所有问题，还有可能把你的配置文件彻底搞坏（亲身经历）。 TyporaMarkdown 编辑器，写博客就靠这个了，说实话 Markdown 用习惯之后其他写文的方式全都弱爆了。 Github账号因为现在记录的是在 Github 上搭建静态博客的过程，所以肯定是需要 Github 账号的，从我个人的角度来说选择这个方式主要是因为免费，而且网上能找到的很多教程都是针对这个方式搭建博客的。如果我能坚持几个月到半年一直稳定更新博客的话，我可能会考虑搞个域名什么的吧，现在暂时就用这个。 2 本地安装 这部分主要参考的是这篇文章：Github + Hexo + Next主题博客搭建教程 2.1 安装HexoHexo 类似于一个引擎，他可以把我们的 Markdown 文件转换为静态 HTML 文件，这样就算是我这种什么也不懂的小白也可以把自己写的文章变成一个大家都能浏览的网页了。 而安装 Hexo 首先需要在自己电脑的硬盘上创建一个文件夹，我们把 Hexo 安装到这个文件夹中，包括我们之后安装的主题也好，写的文章也好，保存在博客中的图片也好，都会在这个文件夹中，路径中不要有中文和空格就好。 然后进入文件夹 右键 - Git Bash Here 调出Git输入命令行的对话框，输入下面的这些命令行就行了，# 后面的内容为注释，不需要输入。 1234npm install hexo -g # 安装Hexohexo -v # 查看版本hexo init # 初始化该文件夹hexo install # 安装一些组件 2.2 本地调试进入 Hexo 的文件夹 右键 - Git Bash Here 调出 Git 输入命令行的对话框，输入如下命令行，# 后面的内容为注释，不需要输入。 12hexo g # 生成静态资源，理解为生成静态网页即可hexo s # 开启本地服务器，用于本地查看博客效果并进行调试 执行完 hexo s 后可以通过在浏览器输入 http://localhost:4000/ 查看自己 Blog 的状态，知道你按 Ctrl+C 为止，这个网页可以一直观察本地 Blog 的状态，比如在这个状态下更改配置文件的内容后保存，刷新一下就可以看到更改后的状态，非常方便。 3 关联 Github 仓库 这部分主要参考的是这篇文章：Github + Hexo + Next 主题博客搭建教程 3.1 建立 Github 仓库登录自己的 Github 账号， Strat a Project ，这里需要注意的一点就是：仓库名称一定要是 Github用户名.github.io 其他的不用注意什么，点绿色的按钮完成创建就好，这样就有了一个用于存放 Blog 的仓库。 3.2 关联本地文件夹与 Github 仓库进入 Hexo 的文件夹 右键 - Git Bash Here 调出 Git 输入命令行的对话框，输入如下命令行，# 后面的内容为注释，不需要输入。 123git config --global user.name "你的Github用户名" # 设置Git的用户名git config --global user.email "你注册Github使用的邮箱" # 设置Git的E-mailssh-keygen -t rsa -C "你注册Github使用的邮箱" # 生成SSH密钥 之后需要的操作有：直接敲一次回车，输入两次提交代码所需要的密码，出现小星星就算大功告成了。 然后要去 系统盘/用户/“用户名”/ssh 这个路径找到刚刚生成的 ssh 密钥文件（pub 格式），打开之后把里面的内容复制一下。 去自己的 Hithub 仓库，找到 Settings 选项，找到 SSH and GPG keys 选项，找到 New SSH key 选项，如果这些选项你都找到了，那就可以开始填表了。 Title 随便写，尽量不要写中文，Key 把刚刚复制的 ssh 密钥粘贴进来就行了。 这里会要求输入一次密码，输入完后基本就大功告成了。 3.3 配置 Deploy进入 Blog 文件夹，找到一个名字叫 _config.yml 的文件，这个是整个 Blog 的配置文件，用 Atom 打开它。 找到关键词 deploy ，进行如下修改。 1234deploy: type: git repo: git@github.com:你的Github用户名/你的Github用户名.github.io.git branch: master 3.4 开始部署进入 Hexo 的文件夹 右键 - Git Bash Here 调出 Git 输入命令行的对话框，输入如下命令行，# 后面的内容为注释，不需要输入。 12hexo g # 生成静态资源，理解为生成静态网页即可hexo d # 部署到远程仓库,每次部署需要输入密码 这个是将本地文件夹部署到 Github 仓库的命令行，通俗的说就是把自己本地的更改同步到 Github 仓库，如果不执行这个命令行的话，不管对本地文件夹进行多少更改，以 Github 仓库为基础的 Blog 是不会发生任何变化的。 但是，在第一次执行这个命令行的时候可能会遇到一点问题，这个时候需要执行如下命令行。 1npm install --save hexo-deployer-git 执行成功后，可以继续执行 hexo d 完成部署，部署的时候需要用到 shh 密钥，首次使用的时候需要输入一个 yes 确认一下，然后再输入设置好的仓库密码即可完成部署。 完成部署后，在浏览器地址栏输入对应的网址即可查看自己的 Blog 状态，网址格式是：https://你的Github用户名.github.io/ 4 Blog 配置文件设置 这部分主要参考的是 Hexo 的官方中文文档：Hexo 官方中文文档 4.1 认识 Blog 配置文件在 Blog 文件夹的根目录有一个文件，文件名是 _config.yml 这就是 Blog 的配置文件，修改这个文件的内容可以更改 Blog 的一些比较基本的部分。这个文件虽然可以用记事本打开但是非常不推荐，接下来的操作都通过我在第一章里推荐的 Atom 来进行，考虑到中文环境，用 Atom 打开 _config.yml 之后记得把右下角第二个按钮改成 UTF-8 ，这样就能解决中文乱码的问题了。 记得每个冒号后面都有一个半角空格，这个非常关键。 4.2 Site 标签123456789# 从上到下分别对应 Blog 标题、 Blog 副标题、 Blog 简介、 Blog 关键词、作者名字、 Blog 语言、时区title: 雾之宅落subtitle:description: 雾之宅落keywords: 雾之,宅author: 雾之# 语言这个根据使用的主题不同会有写为变化，这里的写法对应的是 NexT 主题 V6language: zh-CNtimezone: Asia/Shanghai 4.3 URL 标签12345678910111213141516# 这里改成网站主页的链接url: https://kirikirino.github.ioroot: /# 博客文章的 URL 结构，请务必写文章之前就想好！# 详细参数请查看：https://hexo.io/docs/permalinks.html# 我这里使用了一个短链接的插件防止自己的文章链接过长不方便分享# 如果要使用的话，需要在根目录运行如下命令# npm install hexo-abbrlink --savepermalink: p/:abbrlink.htmlpermalink_defaults:# addrlink插件配置部分，需要手动添加# abbrlink configabbrlink: alg: crc16 #support crc16(default) and crc32 rep: hex #support dec(default) and hex 4.4 Writing 标签12345678910111213141516171819202122232425# 新文章名字格式new_post_name: :title.md # 预设布局default_layout: post# 自动把标题的每个单词首字母转换为大写titlecase: false# 在新标签中打开链接external_link: true# 把文件名称转换为 (1) 小写或 (2) 大写filename_case: 0# 显示草稿render_drafts: false# 启动 Asset 文件夹，一种将文章、CSS、图片、JS 文件捆绑保存的资源文件夹post_asset_folder: false# 把链接改为与根目录的相对位址，通常情况下建议使用绝对位址relative_link: false# 显示未来的文章future: true# 代码块的设置highlight: enable: true line_number: true # 代码自动高亮 auto_detect: false tab_replace: 4.5 Home page setting 标签12345678910111213index_generator:# 博客索引页面的根路径，默认为'' path: ''# 首页每页显示的文章数量，0表示关闭分页功能 per_page: 5# 首页文章排序方式，默认情况下是按照日期降序排列 order_by: -date 4.6 Category &amp; Tag 标签123456789101112# 文章默认分类, uncategorized 表示未分类default_category: uncategorized# 分类别名，格式为 分类: 分类别名category_map: 技术: technique 胡言乱语: nonsense 动画: anime 设计: design# 标签别名，格式为 标签: 标签别名tag_map: 第一篇文章: First article Blog搭建: Blog Build 4.7 Date / Time format 标签1234# 日期格式date_format: YYYY-MM-DD# 时间格式time_format: HH:mm:ss 4.8 Pagination 标签1234# 每页显示的文章量，0表示关闭分页功能per_page: 10# 分页目录pagination_dir: page 4.9 Extensions 标签12# 主题设置，这里填主题对应的文件夹名字，在博客文件夹根目录下themes文件夹中，这里我用的是 NexT 主题theme: next 5 主题安装 Hexo的使用中，选择一个喜欢的主题是非常关键的，这里我选用的是 NexT ，这个主题简约大方，功能齐全，说明文档齐全，网上关于这个主题的配置教程也是一搜一大把，对入门选手来讲还是很友好的。 5.1 安装 NexT进入 Hexo 的文件夹 右键 - Git Bash Here 调出 Git 输入命令行的对话框，输入如下命令行，# 后面的内容为注释，不需要输入。 1git clone https://github.com/iissnan/hexo-theme-next themes/next 5.2 启用 NexT在 4.9 中看到了，设置主题的地方在 Blog 的配置文件中，所以这里直接打开 Blog 根目录中的配置文件 _config.yml ，找到 Extensions 标签，将主题设置为 NexT 即可。 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next 6 NexT 配置文件设置 这部分主要参考的是 NexT 的使用文档：NexT 使用文档 6.1 认识 NexT 配置文件在 Blog 文件夹的根目录中有一个 themes 的文件夹，里面保存着所有下载过的 Hexo 的主题，找到我们要用的主题 next 文件夹，在这个文件夹中有一个文件名是 _config.yml 这就是 NexT 的配置文件，修改这个文件的内容可以更改 NexT 的很多地方。这个文件虽然可以用记事本打开但是非常不推荐，接下来的操作都通过我在第一章里推荐的 Atom 来进行，考虑到中文环境，用 Atom 打开 _config.yml 之后记得把右下角第二个按钮改成 UTF-8 ，这样就能解决中文乱码的问题了。 记得每个冒号后面都有一个半角空格，这个非常关键。 6.2 override 开关及缓存开关打开 _config.yml 看到的第一个开关就是这个了。 1234567# Set to true, if you want to fully override the default configuration.# Useful if you don't want to inherit the theme _config.yml configurations.override: false# Allow to cache content generation. Introduced in NexT v6.0.0.cache: enable: true 关于这个 override 的开关，主题的作者有一篇文章可以看一下：Theme configurations using Hexo data files 总的来说就是为了解决主题在更新的时候可能会覆盖 _config.yml 导致用户的自定义配置消失的问题，主题的作者想到了一个方案就是将配置文件分离，一部分在主题文件夹中的 _config.yml 中，另一部分放在站点的 source/_data 目录下新建 next.yml 文件中（_data目录可能需要新建）。 然而这个方法有几个缺点： 每次修改 _next.yml 需要重启 hexo server 才能生效 在主题的 _config.yml 里面打开的选项，无法在 source/_data/next.yml 中关闭 我觉得对于我这种刚刚入门的小白来说，这两个缺点有点头大，所以我这里就决定老老实实的 PASS ，这个开关我选择关着（ false ）。 缓存这个是 V6 添加的新特性，默认是开启状态。 6.3 favicon 标签12345678910# 将 "#" 删掉可以开启部分语句，在语句前加上 “#” 可以使该语句失效# 网站的 ICON 按照路径可以在主题文件夹中找到对应的图片，更改该图片是最简单的更换 ICON 的办法# 开启的这四个按顺序分别是：小图标、中图标、IOS 触摸图标、safari 固定标签图标favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 这个是我为我的个人 Blog 制作的 ICON 。 6.4 footer 标签12345678910111213141516171819202122232425262728293031323334353637383940# 页脚设置，就是网站拖到最下面看到的那些footer: # 建站年份 since: 2019 # 建站年份后面的图标 # 到这里来找：https://fontawesome.com/v4.7.0/icons/#web-application # 找到喜欢的把名字直接写到 “name” 标签后面就行了 icon: name: anchor # 图标是否开启动画 # If you want to animate the icon, set it to true. animated: true # Change the color of icon, using Hex Code. color: "#808080" # 图标后面想写什么，如果不定义的话会默认写网站作者的名字 copyright: 雾之宅落 # ------------------------------------------------------------- # 在页脚中关于 Hexo 的那些内容显示的开关，我这里全都关闭了 # Hexo link (Powered by Hexo). powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: false # ------------------------------------------------------------- # 页脚添加公安备案信息，与时俱进了wwww # http://www.miitbeian.gov.cn beian: enable: false icp: 这里发现 NexT 自带了一套 ICON 方案，但是这套方案中的 ICON 并没有包含了我需要的全部 ICON （比如豆瓣），所以这里我打算添加几个 ICON 。 这部分主要参考了这篇文章：Hexo NexT 博客增加知乎豆瓣图标支持 首先，前往 阿里巴巴矢量库 挑选自己需要的 ICON，将想要的 ICON 加入购物车。 然后点击右上角的购物车图标，下载代码。 在下载的压缩包中找到 iconfont.css 文件，打开后将其中的所有内容都复制加入到 /themes/next/source/css/_custom/custom.styl 文件中，并根据需要修改参数，详细的可以看本文第 7 章。 6.5 版权声明标签12345678910# 版权声明信息# 有兴趣的可以看这里：https://creativecommons.org/share-your-work/licensing-types-examples# 可用的协议方案: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zerocreative_commons: # 协议方案 license: by-nc-sa # 侧边栏显示开关 sidebar: false # 文章结尾显示开关 post: true 如果觉得默认的格式不喜欢，想简单的自定义内容的话，可以通过更改对应的语言文件内容来实现。比如我使用的是简体中文，所以这里我打开文件 \themes\next\languages\zh-CN.yml ，找到如下字段并进行更改： 12345copyright: author: 本文作者 link: 本文链接 license_title: 版权声明 license_content: 本文首发于&lt;a href="https://kirikirino.github.io/"&gt;雾之宅落&lt;/a&gt;，欢迎转载，转载请注明出处！ 6.6 SEO Settings1234567891011121314151617# SEO 相关设置# ---------------------------------------------------------------# SEO Settings# ---------------------------------------------------------------# 规范网址开关，详细的可以跳转到 https://support.google.com/webmasters/answer/139066 中查看canonical: true# SEO 优化开关seo: true# 网页搜索及标签页显示副标题开关index_with_subtitle: true# 使用 BASE64 加密和解密自动添加外部URL。exturl: true 关于这个标签，需要首先明白一个概念，什么是SEO。 SEO（Search Engine Optimization）：汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。目的是：为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。 SEO的实际用处还是有一定争议的，有人说有用有人说没用，关于SEO的优化方法也能搜索到很多。考虑到这个功能优化的意义并不是特别显著而且我现在 Blog 只是刚刚搭建没什么内容，所以这里我就只是简单的更改了一下 NexT 主题的配置文件进行这个……应该是最简单的优化。 6.7 Menu Settings1234567891011121314151617181920212223242526272829# 菜单设置# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# 页面名: 路径 || ICON 名，以这个格式建立菜单项# ICON 名到这里来找：https://fontawesome.com/v4.7.0/icons/#web-application# 关于这部分看不懂的可以跳到本文 8.1 处menu: home: / || home #categories: /categories/ || sitemap archives: /archives/ || university tags: /tags/ || tags anime: /categories/anime || desktop technique: /categories/technique || cubes design: /categories/design || magic nonsense: /categories/nonsense || coffee #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat about: /about/ || user# 菜单相关的两个开关menu_settings: # ICON 开关 icons: true # 显示数字开关 badges: false 在这个标签中可以看到，NexT 主题预设了几个菜单方案，比如主页（home）、标签（tegs）、关于（about）……等等，这些只要调整前面的 “#” 就可以改变此菜单项是否启用，但是单单在这里设置是不够的，虽然设置好之后就可以在 Blog 上看到这些菜单项了，但是点进去会收到诸如 Cannot GET /about/ 的提示，这是因为虽然指定了名字、路径、ICON，但是页面实际上并不存在，路径是无效的，这时候我的选择是不改变配置文件中的路径，而是根据配置文件中的路径建立子页面。 进入 Hexo 的文件夹 右键 - Git Bash Here 调出 Git 输入命令行的对话框，根据我的实际需求输入如下命令行，# 后面的内容为注释，不需要输入。 123hexo new page "about" # 建立 about 子页面hexo new page "tags" # 建立 tags 子页面hexo new page "categories" # 建立 categories 子页面 这样，在 Hexo 的根目录下的 source 文件夹中就会分别出现 about tags categories 三个文件夹，他们分别对应新建立的这三个子页面，接下来根据页面的功能不同，分别进行调整。 进入 about 文件夹中，打开 index.md 文件，对内容进行更改，# 后面的内容为注释，不需要输入。 1234567891011121314151617181920---title: # 页面标题，如果写了的话会在页面顶端居中显示date: 2018-12-31 23:38:26 # 页面创建时间comments: false # 此页面禁用评论功能---&lt;div class="about"&gt;&lt;h2&gt;About&lt;/h2&gt;| 九零后 | 东北 | 已工作 || 土木工程 | 不会盖楼 | 非码农 || 爱分享动画截图 | 二不起的二次元 || Fate/GO | 国服 | Android端 | 没钱 || 凭实力单身 | 自杀式单身 | 何以解忧唯有暴富 |&lt;h2&gt;Blog&lt;/h2&gt;| 雾之宅落 | | 动画 | 兴趣爱好 || 技术 | 学习 | 记录 | 分享 || 设计 | 根本不懂设计 | 谁没个万一啊 || 胡言乱语 | 不知道怎么分类的文章 | 没喝酒 || 还是推特适合老子 | 140 字真好写啊 | 词穷了 |&lt;/div&gt; 进入 categories 文件夹中，打开 index.md 文件，对内容进行更改，# 后面的内容为注释，不需要输入。 1234567---title: # 页面标题，如果写了的话会在页面顶端居中显示date: 2018-12-31 23:07:50 # 页面创建时间type: "categories" #设置页面类型，NexT 会自动匹配内容comments: false # 此页面禁用评论功能--- 进入 tags 文件夹中，打开 index.md 文件，对内容进行更改，# 后面的内容为注释，不需要输入。 1234567---title: # 页面标题，如果写了的话会在页面顶端居中显示date: 2019-01-02 00:06:23 # 页面创建时间type: "tags" #设置页面类型，NexT 会自动匹配内容comments: false # 此页面禁用评论功能--- 这样就完成了关于、分类、标签三个菜单项子页面的建立和设置，可以在 Blog 中查看效果。 6.8 Scheme Settings1234567891011# 主题风格设置# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 这几个主题风格通过 “#” 的增减来切换，至于这几个风格都长啥样，作者给出了几个实例。 💟 Muse scheme: LEAFERx | XiaMo | OAwan 🔯 Mist scheme: Jeff | uchuhimo | xirong ♓️ Pisces scheme: Vi | Acris | Rainy ♊️ Gemini scheme: Ivan.Nginx | Raincal | Dandy 6.9 Sidebar Settings123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103# 侧边栏设置# ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# 侧边栏显示标签类别的开关site_state: true# 第一步你要确认 social 前面没有 “#” 这样才能使用下面的这些联络方式# 依然是通过增减 “#” 来开关不同的入口，基本上都是把 yourname 的部分改成自己的 ID 就可以了social: #GitHub: https://github.com/yourname || github E-Mail: mailto:dalibo159159@gmail.com || envelope #Google: https://plus.google.com/yourname || google Twitter: https://twitter.com/dalibo159 || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skypesocial_icons: # 侧栏栏 ICON 开关 enable: true # 仅显示 IOCN 开关 icons_only: false transition: false# 友情链接设置# ICON 名到这里来找：https://fontawesome.com/v4.7.0/icons/#web-applicationlinks_icon: 有趣的链接 &lt;i class="fa fa-paper-plane" aria-hidden="true"&gt;&lt;/i&gt;# 友情链接的标题links_title: 有趣的链接# 友情链接布局选择，依旧是通过增减 “#” 来选择# block 是一条链接一行，inline 是如果文字内容不多的话一行可以放多个链接#links_layout: blocklinks_layout: inline# 还是熟悉的格式wwwwlinks: 是白泠泠泠泠泠泠泠泠泠泠泠泠酱: https://youon.moe/ 画蓝海 | Drawoceans: https://info.drawoceans.com/ 小葵的实验室: http://labgirl-aoi.zone/# Sidebar Avatar# 侧边栏头像设置avatar: # 按照下面的这个路径找到 NexT 主题文件夹中的图片，替换这个图片是最简单的更换侧边栏头像的办法 url: /images/avatar.gif # 头像圆形显示开关 rounded: false # 头像不透明度 opacity: 1 # 头像旋转开关 rotated: false toc: # 侧边栏显示文章目录开关 enable: true # 在侧边栏文章目录标题前自动加数字序号 number: false # 如果标题太长，就放到下一行继续显示 wrap: false # 生成的最大标题深度 max_depth: 6sidebar: # 侧栏位置设置，依旧是通过增减 “#” 来选择（只对 Pisces 和 Gemini 主题风格有效） position: left #position: right # 自定义侧栏宽度 # 默认情况下侧栏宽度如下 # Muse | Mist: 320 # Pisces | Gemini: 240 #width: 300 # 设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有： # post - 默认行为，在文章页面（拥有目录列表）时显示 # always - 在所有页面中都显示 # hide - 在所有页面中都隐藏（可以手动展开） # remove - 完全移除 # 依旧是通过增减 “#” 来选择 #display: post #display: always display: hide #display: remove # 侧栏与顶部菜单栏的偏移量（只对 Pisces 和 Gemini 主题风格有效） offset: 12 # 回到侧边栏（只对 Pisces 和 Gemini 主题风格有效） b2t: false # 右下角回到顶部按钮中显示阅读百分比 scrollpercent: true # 移动端显示侧栏（只对 Muse 和 Mist 主题风格有效） onmobile: true 6.10 Post Settings12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# 发布设置# ---------------------------------------------------------------# Post Settings# ---------------------------------------------------------------# 点击 Read More，页面自动到 &lt;!-- more --&gt; 处scroll_to_more: false# 用 cookies 保存浏览的位置信息，打开文章自动跳到上次阅读的位置save_scroll: false# 自动摘录主页中的描述作为前导文本excerpt_description: false# 按字数自动加入 Read More，可控性极差不推荐使用# 推荐在文章中加入 &lt;!-- more --&gt; 控制首页摘要显示内容auto_excerpt: enable: false length: 150 # 阅读全文按钮开关read_more_btn: false# 文章顶部标题下方显示的内容post_meta: item_text: true created_at: true updated_at: # 更新日期显示开关 enabled: false # 更新日期显示到天开关 another_day: false categories: true# 显示字数统计和阅读时长预计，详细的可以看这里 https://github.com/theme-next/hexo-symbols-count-time# 要启用这个需要回到 Hexo 根目录右键 - Git Bash Here 调出 Git 输入命令行的对话框输入下面命令# npm i --save hexo-wordcountsymbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275# 代码块相关设置codeblock: # 自定义代码块圆角半径 border_radius: copy_button: # 给代码块添加复制按钮 enable: false # 显示复制结果 show_result: false # 微信订阅的相关设置，因为我没打算用所以干脆的没有研究# Wechat Subscriber#wechat_subscriber: #enabled: true #qcode: /path/to/your/wechatqcode ex. /uploads/wechat-qcode.jpg #description: ex. subscribe to my blog by scanning my public wechat account# 文章打赏相关，基本跟我没啥关系的功能我就不研究了# Reward#reward_comment: Donate comment here#wechatpay: /images/wechatpay.jpg#alipay: /images/alipay.jpg#bitcoin: /images/bitcoin.png# 一个可生成相关帖子或热门帖子链接列表的 Hexo 插件# 具体使用方法看这里: https://github.com/tea3/hexo-related-popular-postsrelated_posts: enable: false title: # custom header, leave empty to use the default one display_in_home: false params: maxCount: 5 #PPMixingRate: 0.0 #isDate: false #isImage: false #isExcerpt: false 6.11 Misc Theme Settings12345678910111213141516171819202122232425262728293031# 其他主题设置# ---------------------------------------------------------------# Misc Theme Settings# ---------------------------------------------------------------# 在移动设备上停用百度转换功能disable_baidu_tranformation: false# 去掉移动端两边留白的开关mobile_layout_economy: false# Android Chrome 浏览器顶部颜色设置android_chrome_color: "#222"# 自定义徽标# 只有 Muse 主题风格可以用# Options:# enabled: [true/false] - Replace with specific image# image: url-of-image - Images's urlcustom_logo: enabled: false image:# 代码高亮显示主题，共有5款主题可供选择# 5款主题分别是: normal | night | night eighties | night blue | night bright# 具体样式可以去这里查看： https://github.com/chriskempson/tomorrow-themehighlight_theme: night# 归档页面的鼓励话语开关cheers_enabled: false 6.12 Font Settings1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# 字体设置# ---------------------------------------------------------------# Font Settings# ---------------------------------------------------------------font: enable: true # Uri of fonts host. E.g. //fonts.googleapis.com (Default). host: https://fonts.loli.net # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: xx`. Use `px` as unit. # Global font settings used for all elements in &lt;body&gt;. global: external: true family: Noto Serif SC size: # Font settings for Headlines (H1, H2, H3, H4, H5, H6). # Fallback to `global` font settings. headings: external: true family: size: # Font settings for posts. # Fallback to `global` font settings. posts: external: true family: # Font settings for Logo. # Fallback to `global` font settings. logo: external: true family: size: # Font settings for &lt;code&gt; and code blocks. codes: external: true family: size: 这部分主要参考的是：Google Fonts 已支持思源宋体！ 注意：要想 NexT 主题的简体中文字体配置生效，站点配置文件中的 language 为主题对应的简中语言。 字体部分除了在主题的配置文件中需要修改之外，还需要修改一个文件的内容，文件的路径为themes/next/source/css/_variables/base.styl ，将 Font families 标签部分改为如下内容： 12345678910111213141516171819// Font families.$font-family-chinese = "Linux Biolinum"$font-family-base = $font-family-chinese, sans-serif$font-family-base = $font-family-chinese, get_font_family('global'), sans-serif if get_font_family('global')$font-family-logo = $font-family-base$font-family-logo = get_font_family('logo'), $font-family-base if get_font_family('logo')$font-family-headings = $font-family-base$font-family-headings = get_font_family('headings'), $font-family-base if get_font_family('headings')$font-family-posts = $font-family-base$font-family-posts = get_font_family('posts'), $font-family-base if get_font_family('posts')$font-family-monospace = consolas, Menlo, $font-family-base, monospace$font-family-monospace = get_font_family('codes'), consolas, Menlo, $font-family-base, monospace if get_font_family('codes')$font-family-icons = 'FontAwesome' 在 base.styl 中有这么一个变量： $font-size-base = 16px 这个变量后面的值可以控制 Blog 文字的大小，默认是 14px ，这里我改为了 16px 。 修改完 base.styl 后还需要下载 字体文件 ,并将解压的文件全部放到 /source/fonts/ 文件夹中（不是 NexT 主题的 source 文件夹，而是 Hexo 的 source 文件夹），如没有找到 fonts 文件夹则自行创建。 最后需要修改样式文件来完成字体部分的自定义，关于样式文件在本文的第 7 章有详细的介绍，这里就不多说了。打开 themes/next/source/css/_custom/custom.styl 文件，在文件中添加如下内容： 123456789101112131415161718192021222324@font-face &#123; font-family: 'Linux Biolinum'; src: url("/fonts/LinBiolinum_Rah.eot"); font-display: swap; src: url("/fonts/LinBiolinum_Rah.eot") format('embedded-opentype'), url("/fonts/LinBiolinum_Rah.woff2") format('woff2'), url("/fonts/LinBiolinum_Rah.woff") format('woff'), url("/fonts/LinBiolinum_Rah.ttf") format('truetype'); font-weight: normal; font-style: normal;&#125;@font-face &#123; font-family: 'Linux Biolinum'; src: url("/fonts/LinBiolinum_RBah.eot"); font-display: swap; src: url("/fonts/LinBiolinum_RBah.eot") format('embedded-opentype'), url("/fonts/LinBiolinum_RBah.woff2") format('woff2'), url("/fonts/LinBiolinum_RBah.woff") format('woff'), url("/fonts/LinBiolinum_RBah.ttf") format('truetype'); font-weight: bold; font-style: normal;&#125;@font-face &#123; font-family: 'Linux Biolinum'; src: url("/fonts/LinBiolinum_RIah.eot"); font-display: swap; src: url("/fonts/LinBiolinum_RIah.eot") format('embedded-opentype'), url("/fonts/LinBiolinum_RIah.woff2") format('woff2'), url("/fonts/LinBiolinum_RIah.woff") format('woff'), url("/fonts/LinBiolinum_RIah.ttf") format('truetype'); font-weight: normal; font-style: italic;&#125; 自此，自定义字体部分的部署就算完毕了。 6.13 Third Party Services Settings12345# 第三方服务设置# ---------------------------------------------------------------# Third Party Services Settings# --------------------------------------------------------------- 因为是第三方服务设置，所以下面会分别介绍里面 NexT 集成的第三方服务 6.13.1 MathJax Support1234567891011# 第三方公式插件math: enable: true per_page: false # 选择你要用的渲染插件 engine: mathjax mathjax: cdn: //cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML katex: cdn: //cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css 之前 V5 版本的时候默认支持的是 MathJax ，这次 V6 又多支持了一个类似的插件，但是因为我之前一直用的是 MathJax，所以继续还是选择用这个。 首先关于这个 MathJax ，wiki上写的云里雾里的感觉根本看不懂，实际找了下效果发现这是写公式用的第三方服务，如果有输入数学公式需求的话这个应该很好用。 开启这个服务首先要安装一个自动部署 MathJax 的hexo插件 ，进入 Hexo 的文件夹 右键 - Git Bash Here 调出 Git 输入命令行的对话框，输入如下命令行。 12npm install hexo-math --savehexo math install 安装完之后到主题的配置文件中，将 mathjax 关键词下的 enable 开关打开，这样就可以用 MathJax 来写数学公式了。 这里有一个需要注意的地方就是，hexo先用marked.js渲染，然后再交给MathJax渲染。在marked.js渲染的时候下划线_是被换成了&lt;em&gt;标签，也就是斜体字，另外 LaTeX 中的\\也会被转义成一个\，这样会导致MathJax渲染时不认为它是一个换行符了。 这个问题有暴力一些的解决办法，可以参考这篇文章 Hexo博客使用MathJax公式并解决Markdown渲染冲突问题 。 这个问题也有温和一些的解决办法，那就是在markdown中使用 MathJax 时，把下标_写成\_ 。 关于 MathJax 的基本语法，可以参考这篇文章MathJax(Markdown中的公式)的基本使用语法 。 6.13.2 copy_tex123456# 说实话我没看懂这个是干嘛的，好像是和复制有关# 有兴趣的可以看这里：https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-texcopy_tex: enable: false copy_tex_js: //cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.js copy_tex_css: //cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.css 6.13.3 PDF 支持1234567891011# PDF 支持# 官方给出的链接是这个: https://github.com/theme-next/theme-next-pdf# 但是好像 404 了，总之先开着应该没什么问题pdf: enable: true per_page: true height: 500px pdfobject: cdn: //cdn.jsdelivr.net/npm/pdfobject@2.1.1/pdfobject.min.js 6.13.4 汉字标准格式123# 汉字标准格式# 使用教程的话可以参考这里： https://github.com/theme-next/theme-next-hanhan: false 汉字标准格式，改变你文字的排版，这个看个人喜好吧，效果的话可以看下这个页面：用印刷品的态度来做 Web 排版 6.13.5 盘古支持12345# 盘古支持# 详细的使用方法看这里: https://github.com/theme-next/theme-next-pangu# 关于这个东西的介绍看这里：https://github.com/vinta/pangu.js# 我个人觉得这东西还是自己手动加好一些pangu: false 6.13.6 Swiftype 站内搜索12# 去掉前面的 # 后输入你的 swiftype key 就可以使用了#swiftype_key: 一个站内搜索的第三方支持，本来想弄来着结果发现网站改版现在只能免费试用14天，还是算了…… 6.13.7 百度统计123# 百度统计# 去掉前面的 # 后输入你的 baidu analytics 就可以使用，获取方法下面有写#baidu_analytics: 功能如字面意思就是百度家提供的统计服务，配置方法首先登录 百度统计，定位到站点的代码获取页面，然后复制 hm.js? 后面那串统计脚本 id，如下图： 6.13.8 Growingio 数据分析1234# Growingio 数据分析# 详细内容可以看这里：https://www.growingio.com# 去掉前面的 # 后输入你的 growingio analytics 就可以使用#growingio_analytics: #your projectId 6.13.9 第三方评论12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364# Disqus，老牌评论服务，功能强大，已被墙disqus: enable: false shortname: count: true lazyload: false # 畅言，搜狐旗下的评论服务，需要网站备案changyan: enable: false appid: appkey:# Valine，基于 LeanCloud 的一款极简风格第三方评论服务# 这个我现在在用，配置方法我在下面会详细写出valine: # 启用开关 enable: true # appid 获取方法下面会说 appid: ■■■■■■■■■■■■■■■■■■■■■■■■ # your leancloud application appid # appkey 获取方法下面会说 appkey: ■■■■■■■■■■■■■■■■ # your leancloud application appkey # 评论邮件提醒功能开关,这里大概有 bug ，开启并不会收到邮件还会打开验证码 notify: false # 验证码功能开关 verify: false # 评论框占位符，就是当用户没输入内容时候评论框中显示的内容 placeholder: 请开始你的吐槽... # 评论表头样式，有几种可选 mm | identicon | monsterid | wavatar | retro | hide avatar: identicon # 自定义评论标题 guest_info: nick,mail # 页面大小 pageSize: 10 visitor: false comment_count: true # 来必力，韩国的一款第三方评论服务#livere_uid:# Gitment，只支持github登陆gitment: enable: false mint: true count: true lazy: false cleanly: false language: github_user: github_repo: client_id: client_secret: proxy_gateway: redirect_protocol: # Gitalk，需要 Github 帐号登录的第三方评论服务gitalk: enable: false github_id: repo: client_id: client_secret: admin_user: distraction_free_mode: true 好，这里针对我在用的 valine 单独写一下配置方法。 到 Leancloud 注册账号并登录 点击创建应用 给应用取个名字 第一列点击存储 ，第二列点击创建Class ，名字填Counter 第一列点击设置 ，第二列点击应用Key ，获取你需要的东西吧 第一列点击设置 ，第二列点击安全中心 ，Web 安全域名 中加入自己的域名以保证数据调用安全 到此为止虽然配置完成了，虽然看上去不是特别美观，但是因为 Valine-Admin 做的评论框改造不适用于最新版的 Valine 所以也没办法了。 6.13.10 第三方分享12345678910111213141516171819202122232425262728293031323334353637383940# 百度家的分享服务，不支持 https# Available values: button | slide# Warning: Baidu Share does not support https.#baidushare:## type: button# addthis 分享# 有兴趣的可以看这里: https://www.addthis.com#add_this_id:# NeedMoreShare2,适合国内环境使用的分享服务# 启用前需要在 Hexo 下运行如下命令# git clone https://github.com/theme-next/theme-next-needmoreshare2 source/lib/needsharebutton# iconStyle 图标风格，有两种方案 default | box# boxForm 展开方式，有两种方案 horizontal | vertical# position 展开位置，两个组合有9中方案可以选 top / middle / bottom + Left / Center / Rightneedmoreshare2: enable: true postbottom: enable: true options: iconStyle: box boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook float: enable: false options: iconStyle: box boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook # Mob 分享# 这个是在网上找到的比较符合我个人需求的第三方分享服务# 以下内容全部需要自行添加到主题配置文件中# 具体的配置方法下面会给出mob_share: enable: true appkey: ■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 这部分参考了这篇文章：NexT主题配置个性化设置 进入 MobSDK 注册账号并登录 右上角进入后台 ，会自动弹出创建新应用 对话框，给应用取个名字 第一列 ShareSDK → WebShare 右边找到 Appkey 填入配置文件中 接下来需要调整的东西就比较多了。 首先在next/layout/_partials/share/里面添加mob_share.swig文件, 内容如下： 1234567891011121314151617181920212223242526272829303132333435&lt;!--MOB SHARE BEGIN--&gt;&lt;div class="-hoofoo-share-title"&gt;分享文章&lt;/div&gt;&lt;div class="-hoofoo-share-buttons"&gt; &lt;div class="-mob-share-twitter -hoofoo-share-twitter -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-twitter" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt; &lt;div class="-mob-share-weibo -hoofoo-share-weibo -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-weibo" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt; &lt;div class="-mob-share-weixin -hoofoo-share-weixin -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-weixin" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt; &lt;div class="-mob-share-qq -hoofoo-share-qq -hoofoo-share-ui-button"&gt;&lt;i class="fa fa-qq" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt; &lt;div class="-mob-share-douban -hoofoo-share-douban -hoofoo-share-ui-button"&gt;&lt;i class="iconfont icon-douban" aria-hidden="true"&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="-mob-share-ui" style="display: none"&gt; &lt;ul class="-mob-share-list"&gt; &lt;li class="-mob-share-weibo"&gt;&lt;p&gt;新浪微博&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-weixin"&gt;&lt;p&gt;微信&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qzone"&gt;&lt;p&gt;QQ空间&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-qq"&gt;&lt;p&gt;QQ好友&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-tencentweibo"&gt;&lt;p&gt;腾讯微博&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-renren"&gt;&lt;p&gt;人人网&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-kaixin"&gt;&lt;p&gt;开心网&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-douban"&gt;&lt;p&gt;豆瓣&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-youdao"&gt;&lt;p&gt;有道云笔记&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-mingdao"&gt;&lt;p&gt;明道&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-pengyou"&gt;&lt;p&gt;朋友网&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-facebook"&gt;&lt;p&gt;Facebook&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-twitter"&gt;&lt;p&gt;Twitter&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-pocket"&gt;&lt;p&gt;Pocket&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-google"&gt;&lt;p&gt;Google+&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-tumblr"&gt;&lt;p&gt;Tumblr&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-instapaper"&gt;&lt;p&gt;Instapaper&lt;/p&gt;&lt;/li&gt; &lt;li class="-mob-share-linkedin"&gt;&lt;p&gt;Linkedin&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div class="-mob-share-close"&gt;取消&lt;/div&gt;&lt;/div&gt;&lt;div class="-mob-share-ui-bg"&gt;&lt;/div&gt;&lt;script id="-mob-share" src="https://f1.webshare.mob.com/code/mob-share.js?appkey=&#123;&#123;theme.mob_share.appkey&#125;&#125;"&gt;&lt;/script&gt;&lt;!--MOB SHARE END--&gt; 然后更改next/layout/post.swig文件。 在 6.0 版本以前的 NexT 中，文章结尾部分的第三方分享服务是在这里进行 IF 判断后实现调用的，而在 6.0 版本以后改到了 \themes\next\layout\_macro\post.swig 中，我们要更改的是 footer 标签中的三处，更改后的 footer 标签的内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&lt;footer class="post-footer"&gt; &#123;% if post.tags and post.tags.length and not is_index %&#125; &lt;div class="post-tags"&gt; &#123;% for tag in post.tags %&#125; &lt;a href="&#123;&#123; url_for(tag.path) &#125;&#125;" rel="tag"&gt;# &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;% endif %&#125; &#123;% if not is_index %&#125; &#123;% if theme.rating.enable or (theme.vkontakte_api.enable and theme.vkontakte_api.like) or (theme.facebook_sdk.enable and theme.facebook_sdk.like_button) or (theme.needmoreshare2.enable and theme.needmoreshare2.postbottom.enable) or (theme.baidushare and theme.baidushare.type === "button") or theme.mob_share.enable %&#125; // 上面这个位置增加一个 or theme.mob_share.enable 的判断 &lt;div class="post-widgets"&gt; &#123;% if theme.rating.enable %&#125; &lt;div class="wp_rating"&gt; &lt;div id="wpac-rating"&gt;&lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% if (theme.vkontakte_api.enable and theme.vkontakte_api.like) or (theme.facebook_sdk.enable and theme.facebook_sdk.like_button) %&#125; &#123;% if theme.rating.enable %&#125; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt; &#123;% endif %&#125; &lt;div class="social-like"&gt; &#123;% if theme.vkontakte_api.enable and theme.vkontakte_api.like %&#125; &lt;div class="vk_like"&gt; &lt;span id="vk_like"&gt;&lt;/span&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% if theme.facebook_sdk.enable and theme.facebook_sdk.like_button %&#125; &lt;div class="fb_like"&gt; &lt;div class="fb-like" data-layout="button_count" data-share="true"&gt;&lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt; &#123;% endif %&#125; &#123;% if (theme.needmoreshare2.enable and theme.needmoreshare2.postbottom.enable) or (theme.baidushare.type === "button") or theme.mob_share.enable %&#125; // 上面这个位置增加一个 or theme.mob_share.enable 的判断 &#123;% if theme.rating.enable or (theme.vkontakte_api.enable and theme.vkontakte_api.like) or (theme.facebook_sdk.enable and theme.facebook_sdk.like_button) %&#125; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt; &#123;% endif %&#125; &lt;div class="social_share"&gt; &#123;% if theme.baidushare.type === "button" %&#125; &lt;div&gt; &#123;% include '../_partials/share/baidushare.swig' %&#125; &lt;/div&gt; &#123;% endif %&#125; &#123;% if theme.needmoreshare2.enable and theme.needmoreshare2.postbottom.enable %&#125; &lt;div id="needsharebutton-postbottom"&gt; &lt;span class="btn"&gt; &lt;i class="fa fa-share-alt" aria-hidden="true"&gt;&lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &#123;% endif %&#125; // 下面开始判断条件调用 mob_share.swig 文件 &#123;% if theme.mob_share.enable %&#125; &lt;div&gt; &#123;% include '../_partials/share/mob_share.swig' %&#125; &lt;/div&gt; &#123;% endif %&#125; // 判断调用结束 &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt; &#123;% endif %&#125; &#123;% endif %&#125; &#123;% if not is_index and (post.prev or post.next) %&#125; &lt;div class="post-nav"&gt; &lt;div class="post-nav-next post-nav-item"&gt; &#123;% if post.next %&#125; &lt;a href="&#123;&#123; url_for(post.next.path) &#125;&#125;" rel="next" title="&#123;&#123; post.next.title &#125;&#125;"&gt; &lt;i class="fa fa-chevron-left"&gt;&lt;/i&gt; &#123;&#123; post.next.title &#125;&#125; &lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;span class="post-nav-divider"&gt;&lt;/span&gt; &lt;div class="post-nav-prev post-nav-item"&gt; &#123;% if post.prev %&#125; &lt;a href="&#123;&#123; url_for(post.prev.path) &#125;&#125;" rel="prev" title="&#123;&#123; post.prev.title &#125;&#125;"&gt; &#123;&#123; post.prev.title &#125;&#125; &lt;i class="fa fa-chevron-right"&gt;&lt;/i&gt; &lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% set isLast = loop.index % page.per_page === 0 %&#125; &#123;% if is_index and not isLast %&#125; &lt;div class="post-eof"&gt;&lt;/div&gt; &#123;% endif %&#125;&lt;/footer&gt; 接下来在next/source/css/_common/components/third-party/里添加样式文件mob_share.styl，内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687.-hoofoo-share-buttons&#123; display: flex; align-items: center; justify-content: center;&#125;.-hoofoo-share-title&#123; margin-top: 30px; font-size: 30px; font-weight: 600; text-align: center; color: #555;&#125;.-hoofoo-share-ui-button&#123; cursor: pointer; background-color: #555; color: #fff; font-size: 24px; line-height: 40px; width: 40px; height: 40px; margin: 10px; border-radius: 25px; float: left; transition: background 0.4s; -moz-transition: background 0.4s; /* Firefox 4 */ -webkit-transition: background 0.4s; /* Safari 和 Chrome */ -o-transition: background 0.4s; text-align: center;&#125;.-hoofoo-share-weibo:hover&#123; background-color: #cf3f41;&#125;.-hoofoo-share-weixin:hover&#123; background-color: #18a01a;&#125;.-hoofoo-share-qq:hover&#123; background-color: #950c0c;&#125;.-hoofoo-share-twitter:hover&#123; background-color: #2ab3e6;&#125;.-hoofoo-share-more:hover&#123; background-color: #777;&#125;.-mob-share-weixin-qrcode-content&#123; border-radius: 4px; -webkit-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); -moz-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); -o-box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);&#125;.-mob-share-weixin-qrcode&#123; margin: 5% !important; width: 90% !important; height: auto !important;&#125;.-mob-share-weixin-qrcode-close &#123; background-image: url('/lib/fancybox/source/fancybox_sprite.png') !important;//因为兼容问题把vendor改成了lib，根据自己的路径修改&#125;.-mob-share-weixin-qrcode-close &#123; overflow: hidden; line-height: 100px !important; position: absolute !important; top: -18px !important; right: -18px !important; width: 36px !important; height: 36px !important; cursor: pointer !important; z-index: 8040 !important;&#125;/*Retina graphics!*/@media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min--moz-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5)&#123; .-mob-share-weixin-qrcode-close &#123; background-image: url('/lib/fancybox/source/fancybox_sprite@2x.png') !important;//因为兼容问题把vendor改成了lib，根据自己的路径修改 background-size: 44px 152px !important; /*The size of the normal image, half the size of the hi-res image*/ &#125;&#125;.-mob-share-close&#123; height: 4em !important; font-size: 0.8em !important; line-height: 4em !important; background: #555 !important; color: #fff !important;&#125; 同一目录下的 third-party.styl 中添加下面这一行内容： 1@import "mob_share"; 在next/layout/_third-party/里添加脚本文件mob_share.swig，内容如下： 12345678&#123;% if theme.mob_share.enable %&#125;&lt;script type="text/javascript"&gt; //微信二维码点击背景关闭 $('body').delegate('.-mob-share-weixin-qrcode-bg','click', function()&#123; $(".-mob-share-weixin-qrcode-close").trigger("click"); &#125;); &lt;/script&gt;&#123;% endif %&#125; 在next/layout/_layout.swig文件的的 body 标签结束前添加如下内容： 1&#123;% include '_third-party/mob_share.swig' %&#125; 到这里，一个好看的 Mob 第三方分享服务就算添加成功了。 6.13.11 站长工具1234567891011121314151617181920# google 站长工具# 有兴趣的可以看这里: https://www.google.com/webmasters/#google_site_verification:# google Analytics，和上面的功能类似# 我用的是这个方案，去下面链接注册后将跟踪 ID 复制过来就可以使用了# https://analytics.google.comgoogle_analytics: ■■■■■■■■■■■■■■■■■■■■# Bing 站长工具# 有兴趣的可以看这里: https://www.bing.com/webmaster/#bing_site_verification:# Yandex 站长工具# 有兴趣的可以看这里: https://webmaster.yandex.ru/#yandex_site_verification:# 百度站长工具# 有兴趣的可以看这里: https://ziyuan.baidu.com/site#baidu_site_verification: 6.13.12 其他第三方服务123456# 流量统计，对于站点流量我不是特别需要，文章的阅读量下面有其他的解决方案#cnzz_siteid:# 这个不知道是什么，有兴趣的可以看下下面这个链接的介绍# https://azure.microsoft.com/en-us/services/application-insights/# application_insights: 6.14 Post widgets &amp; FB/VK comments settings123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122# 发布小部件， Facebook 和 VKontakte 评论设置# Post widgets &amp; FB/VK comments settings.# ---------------------------------------------------------------# Facebook SDK，作为外行我只觉得这个能在文章标题下增加两个 Facebook 按钮（分享和点赞）# 详细的说明看这里：https://github.com/iissnan/hexo-theme-next/pull/410facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true# Facebook 评论插件，如果要启用这个就要开启上面的 Facebook SDKfacebook_comments_plugin: enable: false num_of_posts: 10 # min posts num is 1 width: 100% # default width is 550px scheme: light # default scheme is light (light or dark)# VKontakte API，不知道这个网站的话无视就可以vkontakte_api: enable: false app_id: #&lt;app_id&gt; like: true comments: true num_of_posts: 10# 可以给文章添加评分插件，详细的可以去下面的链接看一下# https://widgetpack.comrating: enable: false id: #&lt;app_id&gt; color: fc6423# ---------------------------------------------------------------# 在文章标题下显示文章的阅读量# 因为依托的是 Leancloud 和评论系统用的是一家公司，所以获取方法在前面已经给出了# 这个和 Valine 一起开的话可能会有 Bug 所以不建议一起使用leancloud_visitors: enable: false app_id: ■■■■■■■■■■■■■■■■■■■■■■■■■■ #&lt;app_id&gt; app_key: ■■■■■■■■■■■■■■■■■ #&lt;app_key&gt; security: true betterPerformance: false # 另一个显示每篇文章访问者数量的工具firestore: enable: false collection: articles #required, a string collection name to access firestore database apiKey: #required projectId: #required bluebird: false #enable this if you want to include bluebird 3.5.1(core version) Promise polyfill# 不蒜子统计，在页脚显示总访客数和总浏览量，将 false 改为 true 就能直接使用# NexT 6.0 以前的版本，因为七牛强制过期原有域名所以实际使用的时候需要修改一些东西# next\layout\_third-party\analytics 这个路径下有一个 busuanzi-counter.swig 文件# 将 dn-lbstatics.qbox.me 改为 busuanzi.ibruce.info# 对于不蒜子统计的一些自定义内容下面会写busuanzi_count: # 总开关 enable: true # 总访客数开关 total_visitors: true # ICON 名到这里来找：https://fontawesome.com/v4.7.0/icons/#web-application total_visitors_icon: user # 总浏览量开关 total_views: true # ICON 名到这里来找：https://fontawesome.com/v4.7.0/icons/#web-application total_views_icon: eye # 文章阅读量开关 post_views: true # ICON 名到这里来找：https://fontawesome.com/v4.7.0/icons/#web-application # 这个和 Leancloud 那个方案缺点就是在首页无法显示文章阅读量 post_views_icon: eye# 腾讯家的分析插件# tencent_analytics:# 腾讯家的移动分析插件# tencent_mta:# 自动将博客文章链接推送给百度baidu_push: false# google 日历calendar: enable: false calendar_id: &lt;required&gt; api_key: &lt;required&gt; orderBy: startTime offsetMax: 24 offsetMin: 4 timeZone: showDeleted: false singleEvents: true maxResults: 250# Algolia 搜索algolia_search: enable: false hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: "We didn't find any results for the search: $&#123;query&#125;" hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms"# 本地搜索# 启用前需要在 Hexo 下运行如下命令# npm install hexo-generator-searchdb --savelocal_search: enable: true trigger: auto top_n_per_article: 1 unescape: false # 书签服务# 有兴趣的可以看这里: https://github.com/theme-next/theme-next-bookmarkbookmark: enable: false save: auto 在 NexT V6 版本之后，在主题的配置文件中不蒜子的配置项只剩下了总开关和 ICON 设置项，于是我选择比较暴力的办法来自定义这项服务。 打开文件 themes\next\layout\_third-party\analytics\busuanzi-counter.swig ，改为如下内容： 123456789101112131415161718192021222324252627&#123;% if theme.busuanzi_count.enable %&#125;&lt;div class="busuanzi-count"&gt; &lt;script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"&gt;&lt;/script&gt; &#123;% if theme.busuanzi_count.total_visitors %&#125; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_visitors_icon &#125;&#125;"&gt;&lt;/i&gt; &lt;/span&gt; 总访客数：&lt;span class="site-uv" title="&#123;&#123; __('footer.total_visitors') &#125;&#125;"&gt; &lt;span class="busuanzi-value" id="busuanzi_value_site_uv"&gt;&lt;/span&gt; &lt;/span&gt; &#123;% endif %&#125; &#123;% if theme.busuanzi_count.total_visitors and theme.busuanzi_count.total_views %&#125; &lt;span class="post-meta-divider"&gt;|&lt;/span&gt; &#123;% endif %&#125; &#123;% if theme.busuanzi_count.total_views %&#125; 总访问量：&lt;span class="site-pv" title="&#123;&#123; __('footer.total_views') &#125;&#125;"&gt; &lt;span class="busuanzi-value" id="busuanzi_value_site_pv"&gt;&lt;/span&gt; &lt;/span&gt; &lt;span class="post-meta-item-icon"&gt; &lt;i class="fa fa-&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;"&gt;&lt;/i&gt; &lt;/span&gt; &#123;% endif %&#125;&lt;/div&gt;&#123;% endif %&#125; 6.15 Tags Settings1234567891011121314151617181920212223242526272829303132# 标签设置# ---------------------------------------------------------------# Tags Settings# ---------------------------------------------------------------# Note tag (bs-callout).# 用法见下面 6.15.1note: style: flat icons: false border_radius: 3 light_bg_offset: 0# Label tag.# 用法见下面 6.15.2label: true# Tabs tag.# 用法见下面 6.15.3tabs: enable: true transition: tabs: true labels: true border_radius: 0# 阅读进度条# 感兴趣的看下这里: https://github.com/theme-next/theme-next-reading-progressreading_progress: enable: false color: "#37c6c0" height: 2px 6.15.1 Note tag内置标签，这个功能在配置文件中设置好后，在使用的时候并不是特别方便，但是效果不错。 首先看一下不同内置标签的样式 Header（without define class style） Default Header Primary Header Info Header Success Header Warning Header Danger Header 在文章中调用内置标签的方法如下： 12345&#123;% note class %&#125;文本内容&#123;% endnote %&#125; 6.15.2 Label tag段落内可用的内置标签，效果和上面的类似，感觉用起来挺麻烦实际效果还不如上面的内置标签，所以就只贴出调用的方法： 1&#123;% label class@文本内容 %&#125; 6.15.3 Tabs tagTabs 标签，效果的话比如这样： 开始Bad End结束这里是开始页面，但是你大概一开始看不到这一页哈哈哈，一开始就直接进入 Bad End 感觉怎么样虽然是 Happy End 但是不太好获得呢 好，接下来是调用方法： 1234567891011121314151617181920212223// 如果不单独给每一个页码添加名字，则页码的名字就默认是 选项卡名字+数字 的格式// ，2 可不填，数字代表选项卡初始页码，如果是 -1 的话则一开始选项卡内容是隐藏的&#123;% tabs 选项卡名字, 2 %&#125;&lt;!-- tab 页码名（可不填写）--&gt;选项卡内容正文&lt;!-- endtab --&gt;&lt;!-- tab 页码名（可不填写）--&gt;选项卡内容正文&lt;!-- endtab --&gt;&lt;!-- tab 页码名（可不填写）--&gt;选项卡内容正文&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 6.16 不懂别瞎动的重要设置 DO NOT EDIT THE FOLLOWING SETTINGS （请勿编辑以下设置）UNLESS YOU KNOW WHAT YOU ARE DOING（除非你知道它是干嘛的） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221# 页面加载动画motion: # 页面加载动画开关 enable: true # 异步函数 async: false transition: # Blog 中块的动画 post_block: slideRightBigIn # Blog 标题部分的动画 post_header: perspectiveUpIn # Blog 中正文部分的动画 post_body: slideRightBigIn # Blog 标题部分的动画 coll_header: perspectiveUpIn # Only for Pisces | Gemini. sidebar: slideUpIn# 好像是个看图片用的插件fancybox: true# 大概是个消除点击延迟的插件# 详细的看这里: https://github.com/theme-next/theme-next-fastclickfastclick: false# 大概是个调整加载顺序的插件# 详细的看这里: https://github.com/theme-next/theme-next-jquery-lazyloadlazyload: false# 页面加载进度条pace: falsepace_theme: pace-theme-minimal# 磁线动态背景canvas_nest: false# 波浪动态背景three_waves: false# 点线动态背景canvas_lines: false# 细线球动态背景canvas_sphere: false# JavaScript 的 3D 库.# 感兴趣的可以看这里: https://github.com/theme-next/theme-next-threethree_waves: falsecanvas_lines: falsecanvas_sphere: false# 只适用于 Pisces 主题风格的内容canvas_ribbon: enable: false size: 300 alpha: 0.6 zIndex: -1 # 相关内容用 CDN 地址取代，加速网站访问，注意版本尽可能要一致vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 # Example: # jquery: //cdn.jsdelivr.net/npm/jquery@2/dist/jquery.min.js # jquery: //cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js jquery: # Internal version: 2.1.5 # See: https://fancyapps.com/fancybox # Example: # fancybox: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js # fancybox: //cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.6/jquery.fancybox.min.js # fancybox_css: //cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css # fancybox_css: //cdnjs.cloudflare.com/ajax/libs/fancybox/3.5.6/jquery.fancybox.min.css fancybox: fancybox_css: # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick # Example: # fastclick: //cdn.jsdelivr.net/npm/fastclick@1/lib/fastclick.min.js # fastclick: //cdnjs.cloudflare.com/ajax/libs/fastclick/1.0.6/fastclick.min.js fastclick: # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload # Example: # lazyload: //cdn.jsdelivr.net/npm/jquery-lazyload@1/jquery.lazyload.min.js # lazyload: //cdnjs.cloudflare.com/ajax/libs/jquery_lazyload/1.9.7/jquery.lazyload.min.js lazyload: # Internal version: 1.2.1 # See: http://velocityjs.org # Example: # velocity: //cdn.jsdelivr.net/npm/velocity-animate@1/velocity.min.js # velocity: //cdnjs.cloudflare.com/ajax/libs/velocity/1.2.1/velocity.min.js # velocity_ui: //cdn.jsdelivr.net/npm/velocity-animate@1/velocity.ui.min.js # velocity_ui: //cdnjs.cloudflare.com/ajax/libs/velocity/1.2.1/velocity.ui.min.js velocity: velocity_ui: # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js # Example: # ua_parser: //cdn.jsdelivr.net/npm/ua-parser-js@0/src/ua-parser.min.js # ua_parser: //cdnjs.cloudflare.com/ajax/libs/UAParser.js/0.7.9/ua-parser.min.js ua_parser: # Internal version: 4.6.2 # See: https://fontawesome.com # Example: # fontawesome: //cdn.jsdelivr.net/npm/font-awesome@4/css/font-awesome.min.css # fontawesome: //cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.2/css/font-awesome.min.css fontawesome: # Internal version: 2.4.1 # See: https://www.algolia.com # Example: # algolia_instant_js: //cdn.jsdelivr.net/npm/instantsearch.js@2/dist/instantsearch.js # algolia_instant_css: //cdn.jsdelivr.net/npm/instantsearch.js@2/dist/instantsearch.min.css algolia_instant_js: algolia_instant_css: # Internal version: 1.0.2 # See: https://github.com/HubSpot/pace # Example: # pace: //cdn.jsdelivr.net/npm/pace-js@1/pace.min.js # pace: //cdnjs.cloudflare.com/ajax/libs/pace/1.0.2/pace.min.js # pace_css: //cdn.jsdelivr.net/npm/pace-js@1/themes/blue/pace-theme-minimal.css # pace_css: //cdnjs.cloudflare.com/ajax/libs/pace/1.0.2/themes/blue/pace-theme-minimal.min.css pace: pace_css: # Internal version: 1.0.0 # See: https://github.com/theme-next/theme-next-canvas-nest # Example: # canvas_nest: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js # canvas_nest_nomobile: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest-nomobile.min.js canvas_nest: canvas_nest_nomobile: # Internal version: 1.0.0 # See: https://github.com/theme-next/theme-next-three # Example: # three: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three.min.js # three_waves: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/three-waves.min.js # canvas_lines: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_lines.min.js # canvas_sphere: //cdn.jsdelivr.net/gh/theme-next/theme-next-three@1/canvas_sphere.min.js three: three_waves: canvas_lines: canvas_sphere: # Internal version: 1.0.0 # See: https://github.com/zproo/canvas-ribbon # Example: # canvas_ribbon: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-ribbon@1/canvas-ribbon.js canvas_ribbon: # Internal version: 3.3.0 # See: https://github.com/ethantw/Han # Example: # han: //cdn.jsdelivr.net/npm/han-css@3/dist/han.min.css # han: //cdnjs.cloudflare.com/ajax/libs/Han/3.3.0/han.min.css han: # Internal version: 3.3.0 # See: https://github.com/vinta/pangu.js # Example: # pangu: //cdn.jsdelivr.net/npm/pangu@3/dist/browser/pangu.min.js # pangu: //cdnjs.cloudflare.com/ajax/libs/pangu/3.3.0/pangu.min.js pangu: # Internal version: 1.0.0 # See: https://github.com/revir/need-more-share2 # Example: # needmoreshare2_js: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.js # needmoreshare2_css: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.css needmoreshare2_js: needmoreshare2_css: # Internal version: 1.0.0 # See: https://github.com/theme-next/theme-next-bookmark # Example: # bookmark: //cdn.jsdelivr.net/gh/theme-next/theme-next-bookmark@1/bookmark.min.js bookmark: # Internal version: 1.1 # See: https://github.com/theme-next/theme-next-reading-progress # Example: # reading_progress: //cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js reading_progress: # leancloud-storage # See: https://www.npmjs.com/package/leancloud-storage # Example: # leancloud: //cdn.jsdelivr.net/npm/leancloud-storage@3/dist/av-min.js leancloud: # valine # See: https://github.com/xCss/Valine # Example: # valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js # valine: //cdnjs.cloudflare.com/ajax/libs/valine/1.3.4/Valine.min.js valine: # gitalk # See: https://github.com/gitalk/gitalk # Example: # gitalk_js: //cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js # gitalk_css: //cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css gitalk_js: gitalk_css: # js-md5 # See: https://github.com/emn178/js-md5 # Example: # md5: //cdn.jsdelivr.net/npm/js-md5@0/src/md5.min.js md5: 7 Blog 页面样式自定义 这部分主要参考了这篇文章：2017年最新基于hexo搭建个人免费博客——自定义页面样式一 7.1 页面自定义需要修改的文件在 NexT 中，作者非常贴心的设置了一个文件，通过修改该文件的内容可以直接覆盖源样式的 CSS 代码，省去了修改源文件及修改多个文件的时间与麻烦。这个文件位置如下： /themes/next/source/css/_custom/custom.styl 7.2 获取要修改部分的要素什么叫修改部分的要素？ 我的目的是要对页面的部分样式进行修改而不是全部样式，那么我要知道我想修改的这部分叫什么名字，怎么声明他。为了获取这个，首先我开启 本地调试 （本文 2.2 中已介绍，这么做是为了方便对每一个修改进行即时确认），使用 Chrome 浏览器 打开了 http://localhost:4000 ，快捷键 F12 打开浏览器自带的 调试者工具 ，然后看下面这张图示： 点击图中 ① 的图标，然后到网页中点击想要自定义的区域（比如 ② ），然后 调试者工具 会自动定位出 ③ 和 ④ ，其中在 ③ 的位置 鼠标右键 → Copy → Copy Selector 这样就可以获得 ② 处的名字了。 然后需要利用 CSS 的一些知识来进行页面的自定义，作为参考的话可以看一下这篇文章 语法汇总 。 7.3 页面自定义 这里我根据自己的实际需求，参考打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 ，完成了页面样式的自定义。 过程略过，直接将结论抛出，我的 custom.styl 文件内容如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676// Custom styles.// 添加网页背景图片// 背景图片可以在这里找 https://www.toptal.com/designers/subtlepatterns/// 图片路径补全：hexo\themes\next\source\imagesbody &#123; background: url(/images/background.png); background-position: 50% 50%;&#125;// 修改字体颜色以配合思源宋体的笔画body &#123; color: #000;&#125;// 调整英文字体文件位置// 字体的下载链接：https://github.com/reuixiy/reuixiy.github.io/raw/master/fonts/Linux_Biolinum.zip@font-face &#123; font-family: 'Linux Biolinum'; src: url("/fonts/LinBiolinum_Rah.eot"); font-display: swap; src: url("/fonts/LinBiolinum_Rah.eot") format('embedded-opentype'), url("/fonts/LinBiolinum_Rah.woff2") format('woff2'), url("/fonts/LinBiolinum_Rah.woff") format('woff'), url("/fonts/LinBiolinum_Rah.ttf") format('truetype'); font-weight: normal; font-style: normal;&#125;@font-face &#123; font-family: 'Linux Biolinum'; src: url("/fonts/LinBiolinum_RBah.eot"); font-display: swap; src: url("/fonts/LinBiolinum_RBah.eot") format('embedded-opentype'), url("/fonts/LinBiolinum_RBah.woff2") format('woff2'), url("/fonts/LinBiolinum_RBah.woff") format('woff'), url("/fonts/LinBiolinum_RBah.ttf") format('truetype'); font-weight: bold; font-style: normal;&#125;@font-face &#123; font-family: 'Linux Biolinum'; src: url("/fonts/LinBiolinum_RIah.eot"); font-display: swap; src: url("/fonts/LinBiolinum_RIah.eot") format('embedded-opentype'), url("/fonts/LinBiolinum_RIah.woff2") format('woff2'), url("/fonts/LinBiolinum_RIah.woff") format('woff'), url("/fonts/LinBiolinum_RIah.ttf") format('truetype'); font-weight: normal; font-style: italic;&#125;@font-face &#123;font-family: "iconfont"; src: url('iconfont.eot?t=1550503257577'); /* IE9 */ src: url('iconfont.eot?t=1550503257577#iefix') format('embedded-opentype'), /* IE6-IE8 */ url('data:application/x-font-woff2;charset=utf-8;base64,d09GMgABAAAAAAOEAAsAAAAABzwAAAM2AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHEIGVgCCcAqCSIIhATYCJAMICwYABCAFhG0HMBtHBsi+QBxw+ysgncTYdTFXivLMuNBXN8PHWftLARG8v9/nnPvuEqDarAV0QAUPqJsqklW7to7I1lc1tYBCsWp88yfG2UTW3ZrQHP1UFSPM6xAjGNrv/1zmCDcHGDUiCYSOCukv516aDoybkFN2xky5ZQHXuxscJCllFgTrAm/+qfGV7QYXrjAN28KLzi8PpsnF5t4jRY/4Ekoq3ue5nN41xOcHynFtGnvwUS/AeGtAY22K87hAAvOG6eULHIj9BKr10wCuH108QF2mhwXiWmAsqBfcssxilUJ5w9wsTlCZ7qZD4Dj6fvy1GiQpK+iC3QuHLuz88JkEcHmpFBCEyxnBFlFgFkAmDhvN20pJeBZYNQ+XDQMcKzf4Ef8fCA77xyOIcjq7FvRCwTMJnehRsxPIsPkqcHNSG3LrgI5U9uc36za+F9z/cuZVaOeCR8PX/vLnqMtTqEZw7kt+V0/3K/TNUdMLZufZrm4b1+vb79C6XjNmZlse0+Abj3TPzXc9pWzMtXZpUbew0tvxQjo6gd/ovz416Ldb469YfYttrbjpK3/x5imEjMqt3WiA0wXT/4fRf75fzgDV9S/74qin4IGdczTZWY6qbj8cuAcejur82+d106t40Zg91PTv8Mdh9M/BF/588/T14R3fvAuJxMpmoG8BnkrOOEjvuLf5t6MCUb9PojZLOQPsAJRY9BSw3/8b//sdpD7zv6Az+L4jkbPEDBhmpfImLcHPFg4sykKs1empBciSXM2lSKgWNiVoe7PnqZq2NzOGyoKQIanQh0KlUTIzZ1GmxgLKVVpCtRmOxTVaFCqJXIVpNQCh0TySem9QaHREZuYTyrT7RrnGAKqdCvKaNcYjTYuQpeRi7AszHE49q9NmnHtHJo8tyYsj1hNJFvjQqDOUY8eUkiwxoejdrBarhynhBO3gMIpjxnzhkBxdTFftren1qaYnLcY5gaY1glgUcaGYLyiDg6W8oLxqVj5/hxi5mEU6KDn/EyIyQevISMcwgDxWpIMoj/JIkXfGqmLKg1IESyA76EViMYbym3uFiEMtSp8Q7FmjN6VSQxWL26uSv1sB1bQ2helWKD/HuW2lAAAA') format('woff2'), url('iconfont.woff?t=1550503257577') format('woff'), url('iconfont.ttf?t=1550503257577') format('truetype'), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */ url('iconfont.svg?t=1550503257577#iconfont') format('svg'); /* iOS 4.1- */&#125;// 豆瓣 ICON.iconfont &#123; font-family: "iconfont" !important; font-size: 22px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;&#125;.icon-douban:before &#123; content: "\e64d";&#125;// 消去页面最顶部的横线.headband &#123; height: 0px;&#125;// 页面顶部标题行及图标行行高.header &#123; line-height: 1.4;&#125;// 页面留白更改.header-inner &#123; padding-top: 0px; padding-bottom: 0px;&#125;.posts-expand &#123; padding-top: 50px;&#125;.posts-expand .post-meta &#123; margin: 15px 0px 0px 0px;&#125;.post-button &#123; margin-top: 0px;&#125;// 顶栏宽度.container .header-inner &#123; width: 100%;&#125;// 标题行背景图片.site-meta &#123; background-image: url(/images/titlebackground.png);&#125;// 将站点标题背景透明并调整位置.brand&#123; background-color: rgba(255, 255, 255, 0); margin-top: 15px; padding: 40px;&#125;// 站点名文本设置.site-title &#123; font-size: 60px; font-weight: bold; color: rgb(255, 255, 255); line-height: 30px; letter-spacing: 20px; font-family: Noto Serif SC; font-weight: 600;&#125;// 菜单栏大小位置颜色.menu &#123; text-align: center; margin-top: 0px; margin-bottom: 0px; padding: 6px; background-color: rgba(255,255,255, 0.4); box-shadow: 0px 5px 5px 0px rgba(0, 0, 0, 0.3);&#125;// 菜单栏文字大小.menu .menu-item a &#123; font-size: 14px;&#125;// 菜单栏内容间距.menu .menu-item &#123; margin: 5px 30px;&#125;// 文章块设置.post .post-block &#123; margin-bottom: 30px; padding: 18px 36px 36px 36px; box-shadow: 0px 0px 5px 0px rgba(182, 183, 183, 0.75); background-color: rgb(255, 255, 255);&#125;// 文章标题文字格式设置.posts-expand .post-title &#123; font-size: 25px; font-weight: 700; text-align: left;&#125;// 文章信息行左对齐.posts-expand .post-meta &#123; text-align: left;&#125;// 文章块（meta）留白更改.posts-expand .post-meta &#123; margin: 0px 0px 0px 0px;&#125;// 文章的描述description.posts-expand .post-meta .post-description &#123; font-size: 15px; margin-top: 10px; margin-bottom: -25px; color: #666;&#125;// 去除在页面文章之间的分割线.posts-expand .post-eof &#123; margin: 0px; background-color: rgba(255, 255, 255, 0);&#125;// 页面底部页脚.footer &#123; line-height: 1.3; background-color: rgba(255, 255, 255, 0.75); color: #333; border-top-width: 3px; border-top-style: solid; border-top-color: rgb(80, 80, 80); box-shadow: 0px -2px 2px 0px rgba(0, 0, 0, 0.1);&#125;// 文章底部的tags.posts-expand .post-tags a &#123; border-bottom: none; margin-right: 0px; font-size: 14px; padding: 0px 5px; border-radius: 3px; transition-duration: 0.2s; transition-timing-function: ease-in-out; transition-delay: 0s;&#125;.posts-expand .post-tags a:hover &#123; background: #eee;&#125;// 文章底部留白更改.post-widgets &#123; padding-top: 0px;&#125;.post-nav &#123; margin-top: 10px;&#125;// 文章底部页面跳转.post-nav-item a &#123; color: rgb(100, 100, 100); font-weight: bold;&#125;.post-nav-item a:hover &#123; color: rgb(80, 115, 184); font-weight: bold;&#125;// 文章底部评论.comments &#123; background-color: rgb(255, 255, 255); box-shadow: 0px 0px 5px 0px rgba(182, 183, 183, 0.75); margin: 0px 0px 30px 0px; padding: 15px 10px 0px 10px;&#125;// 超链接样式a &#123; color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0);&#125;a:hover &#123; color: rgb(224, 60, 138); border-bottom-color: rgb(224, 60, 138);&#125;// 选中文字部分的样式::selection &#123; background-color: rgb(88, 178, 220); color: #FFF;&#125;// 分割线样式hr &#123; margin: 10px 0px 30px 0px;&#125;// 文章内标题样式（左边的竖线）.post-body h2, h3, h4, h5, h6 &#123; border-left: 4px solid rgb(88, 178, 220); margin-left: -36px; padding-left: 32px;&#125;// 去掉图片边框.posts-expand .post-body img &#123; border: none; padding: 0px;&#125;.post-gallery .post-gallery-img img &#123; padding: 3px;&#125;// 文章``代码块的自定义样式// 方案来自 http://shenzekun.cncode &#123; color: #ff7600; background: #fbf7f8; margin: 2px;&#125;.highlight, pre &#123; margin: 5px 0; padding: 5px; border-radius: 3px;&#125;.highlight, code, pre &#123; border: 1px solid #d6d6d6;&#125;// 文章```代码块diff样式pre .addition &#123; background: #A8D8B9; color: #000000;&#125;pre .deletion &#123; background: #EB7A77; color: #FFFFFF;&#125;// 侧栏.sidebar &#123; box-shadow: inset 0px 0px 10px 0px rgba(0, 0, 0, 0.5); background-color: rgba(0, 0, 0, 0.95);&#125;.sidebar-inner &#123; margin-top: 30px;&#125;// 侧栏顶部文字.sidebar-nav li &#123; font-size: 17px; font-weight: bold; font-family: Noto Serif SC; font-weight: 900; color: rgb(88, 178, 220);&#125;.sidebar-nav li:hover &#123; color: rgb(224, 60, 138);&#125;.sidebar-nav .sidebar-nav-active &#123; color: rgb(88, 178, 220); border-bottom-color: rgb(255, 255, 255); border-bottom-width: 1.5px;&#125;.sidebar-nav .sidebar-nav-active:hover &#123; color: rgb(224, 60, 138);&#125;// 侧栏站点概况行高.site-overview &#123; line-height: 1.5;&#125;// 隐藏侧栏站点作者名.site-author-name &#123; display: none;&#125;// 侧栏站点描述.site-description &#123; letter-spacing: 5px; font-size: 20px; font-weight: bold; font-family: Noto Serif SC; font-weight: 900; margin-top: 10px; margin-left: 5px; margin-bottom: 10px; color: rgb(235, 122, 119);&#125;// 侧栏站点文章、分类、标签.site-state &#123; line-height: 0.85; margin-left: 7px;&#125;.site-state-item &#123; padding: 0px 10px; border-left: 1.5px solid rgb(255, 255, 255);&#125;// 侧栏社交链接.links-of-author &#123; margin-top: 20px; margin-left: 20px;&#125;// 侧栏友链标题.links-of-blogroll-title &#123; margin-bottom: 10px; margin-top: 10px; color: rgba(88, 178, 220, 0.95); margin-left: 6px; font-size: 15px; font-weight: bold; letter-spacing: 4px;&#125;// 侧栏超链接样式（友链的样式）.sidebar a &#123; color: #ccc; border-bottom: none;&#125;.sidebar a:hover &#123; color: rgb(255, 255, 255);&#125;// 侧栏目录链接样式.post-toc ol a &#123; font-size: 15px; color: rgb(88, 178, 220); border-bottom: 1px solid rgb(150, 150, 150);&#125;.post-toc ol a:hover &#123; font-size: 15px; color: rgb(224, 60, 138); border-bottom-color: rgb(230, 230, 230);&#125;// 侧栏目录链接当前目录样式.post-toc .nav .active &gt; a &#123; color: rgb(224, 60, 138); border-bottom-color: rgb(224, 60, 138);&#125;.post-toc .nav .active &gt; a:hover &#123; color: rgb(224, 60, 138); border-bottom-color: rgb(224, 60, 138);&#125;// 归档文章块.posts-collapse &#123; margin: 30px 0px;&#125;@media (max-width: 767px) &#123; .posts-collapse &#123; margin: 20px 2px; &#125;&#125;.posts-collapse .post &#123; margin: 0px 2.5px; background-color: rgb(255, 255, 255); padding: 10px 36px 10px 36px;&#125;// 归档时间轴左边线条.posts-collapse::after &#123; top: 0; margin-left: -2px; background-color: rgb(60, 60, 60);&#125;// 隐藏归档时间轴左边线条圆点.posts-collapse .collection-title::before &#123; display: none;&#125;.page-archive .posts-collapse .archive-move-on &#123; display: none;&#125;// 归档时间轴年份.posts-collapse .collection-title h1, .posts-collapse .collection-title h2 &#123; color: rgb(60, 60, 60);&#125;.posts-collapse .collection-title&#123; margin-bottom: 0px;&#125;// 归档时间轴文章标题左边圆点颜色.posts-collapse .post-header:hover::before &#123; background-color: rgb(224, 60, 138);&#125;// 归档时间轴文章标题.posts-collapse .post-title a &#123; color: rgb(88, 178, 220); font-size: 18px; font-weight: 600;&#125;.posts-collapse .post-title a:hover &#123; color: rgb(224, 60, 138); font-size: 18px; font-weight: 600; margin-top: 0px;&#125;// 归档时间轴文章标题底部虚线.posts-collapse .post-header:hover &#123; border-bottom-color: rgb(130, 130, 130);&#125;// 标签文章块.tag-cloud &#123; margin: 0px 50px 40px 50px; box-shadow: 0px 0px 5px 0px rgba(182, 183, 183, 0.75); background-color: rgb(255, 255, 255); padding: 36px 18px 18px 18px;&#125;.tag-cloud-title &#123; margin-bottom: 15px; font-size: 25px; font-weight: 600;&#125;@media (max-width: 767px) &#123; .tag-cloud &#123; margin: -73px 15px 50px 15px; padding: 86px 5px 36px 5px; &#125;&#125;/*标签文字大小及颜色需更改 themes/next/layout/page.swig 文件内容在文件中找到如下内容修改对应参数&#123;&#123; tagcloud(&#123;min_font: 15, max_font: 33, amount: 1000, color: true, start_color: '#58B2DC', end_color: '#E03C8A'&#125;) &#125;&#125;*/// 标签页超链接样式.tag-cloud a &#123; border-bottom: 1.5px solid rgb(88, 178, 220); text-decoration: none;&#125;.tag-cloud a:hover &#123; border-bottom: 1.5px solid rgb(224, 60, 138); text-decoration: none;&#125;// about 页样式.about &#123; margin: 0px 0px 0px 0px; box-shadow: 0px 0px 5px 0px rgba(182, 183, 183, 0.75); background-color: rgb(255, 255, 255); padding: 10px 36px 36px 36px; font-size: 20px; line-height: 50px; letter-spacing:9px;&#125;@media (max-width: 767px) &#123; .about &#123; margin: -60px 0px 20px 0px; padding: 5px 15px 36px 15px; font-size: 13px; line-height: 30px; letter-spacing:3px; &#125;&#125;#posts &gt; div &gt; div &gt; div &gt; h2:nth-child(1) &#123; font-size: 30px; font-weight: 600; margin-top: 10px; margin-bottom: -25px;&#125;#posts &gt; div &gt; div &gt; div &gt; h2:nth-child(8) &#123; font-size: 30px; font-weight: 600; margin-top: 10px; margin-bottom: -25px;&#125;// 本地搜索框.local-search-popup .search-icon, .local-search-popup .popup-btn-close &#123; color: rgb(88, 178, 220); margin-top: 7px;&#125;.local-search-popup .local-search-input-wrapper input &#123; padding: 9px 0px; height: 21px; background-color: rgb(255, 255, 255);&#125;.local-search-popup .popup-btn-close &#123; border-left: none;&#125;// 音乐播放器aplayer.aplayer &#123; font-family: Lato, -apple-system, BlinkMacSystemFont, "PingFang SC", "Hiragino Sans GB", "Heiti SC", STHeiti, "Source Han Sans SC", "Noto Sans CJK SC", "WenQuanYi Micro Hei", "Droid Sans Fallback", "Microsoft YaHei", sans-serif !important;&#125;.aplayer-withlrc.aplayer .aplayer-info &#123; background-color: rgb(255, 255, 255);&#125;// 音乐播放器aplayer歌单.aplayer .aplayer-list ol &#123; background-color: rgb(255, 255, 255);&#125;// 自定义的引用样式#posts &gt; article &gt; div &gt; div &gt; blockquote &#123; color: #555; border-left: 4px solid rgb(88, 178, 220); background-color: rgb(230, 240, 255); border-top-right-radius: 3px; border-bottom-right-radius: 3px; margin-bottom: 20px;&#125;// 自定义的文章摘要图片样式img.img-topic &#123; width: 100%;&#125;// 自定义替代description的样式p.description&#123; text-align: center; font-size: 14px; font-style: italic; color: #666; margin-top: 30px;&#125;code.description &#123; padding: 1px 1px 1px 1px; margin: 0px 1px 0px 4px;&#125;// 移动端样式@media (max-width: 1023px) &#123; .container &#123; background-color: rgba(0, 0, 0, 0); &#125; .sidebar &#123; box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.5); border-top-left-radius: 5px; border-bottom-left-radius: 5px; &#125; .feed-link &#123; display: none !important; &#125;&#125;@media (max-width: 767px) &#123; .main &#123; padding-bottom: 120px; &#125; .posts-expand &#123; margin: 0px; padding-top: 70px; &#125; .posts-expand .post-title &#123; font-size: 22px; &#125; .posts-expand .post-meta &#123; font-size: 10px; &#125; .post &#123; margin-bottom: 30px !important; padding: 20px 15px 15px 15px !important; &#125; .post-body h2, h3, h4, h5, h6 &#123; margin-left: -15px; padding-left: 11px; &#125; .posts-expand .post-tags &#123; margin-top: 10px; &#125; .post-widgets &#123; margin-top: 10px; &#125; .comments &#123; margin: 40px 0px 40px 0px !important; &#125; .footer &#123; box-shadow: 0px -5px 10px 0px rgba(0, 0, 0, 0.5); &#125;&#125;.sidebar-active #sidebar-dimmer &#123; opacity: 0;&#125;// 移动端左上角菜单按钮.site-nav-toggle &#123; top: 35px; left: 10px;&#125;.btn-bar &#123; background-color: rgb(255, 255, 255);&#125;// 移动端菜单@media (max-width: 767px) &#123; .menu &#123; text-align: center; box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5); &#125; .site-nav &#123; top: initial; background-color: rgba(255, 255, 255, 0.75); border-top: none; border-bottom: none; position: relative; z-index: 1024; &#125;&#125;// 移动端顶部@media (max-width: 767px) &#123; .site-title &#123; font-size: 70px !important; letter-spacing: 0px !important; &#125; .site-subtitle&#123; letter-spacing: 0px !important; padding-bottom: 0px !important; &#125; .site-meta &#123; box-shadow: 0px 5px 10px 0px rgba(0, 0, 0, 0.5); &#125; .menu .menu-item &#123; margin: 0px 10px !important; &#125;&#125; 8 其他自定义内容实际上完成以上内容，大部分可以配置的内容基本都已经完毕了，接下来就是一些比较杂的小项，根据自己需求有选择性的配置。 8.1 在首页菜单里添加的独立的分类页 这节主要参考这篇文章：2017年最新基于hexo搭建个人免费博客——自定义页面样式二 8.1.1 修改 HEXO POST 模板在 HEXO 根目录下，找到文件夹 scaffolds ， 此文件夹下定义创建文章的基本模型，可以修改此模板以实现在每次进行 hexo new “文章名” 的时候，文章以此模板进行对应配置属性创建。现在要新增categories字段，让每次新增文章都会打上此属性字段。scaffolds里有三个文件分别对应草稿、页面、文章，建议都加上如下代码： 1234title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories: 8.1.2 新增一文章在根目录执行如下命令创建一篇新的文章： 1hexo new “文章名字” 打开新建的文章，在 categories 标签中写下分类的名字，保存文档，在你进行 hexo g 编译的时候会在 PUBLIC 目录下的 categories 下建立以此分类命名的文件夹，以后的链接将定向到此文件夹。 8.1.3 修改主题配置文件添加 MENU 标签字段这里我根据我个人需求，已经建立好了以下四个分类： 技术 胡言乱语 动画 设计 在进行了 hexo g 编译后，打开 NexT 主题配置文件，更改 MENU 标签内容如下： 12345678910111213menu: home: / || home #categories: /categories/ || sitemap archives: /archives/ || university tags: /tags/ || tags anime: /categories/anime || desktop technique: /categories/technique || cubes design: /categories/design || magic nonsense: /categories/nonsense || coffee #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat about: /about/ || user 8.1.4 修改主题目录下的语言配置文件为了在页面上正确的显示中文分类名称，这里需要修改主题目录下的语言配置文件。 打开 themes\next\languages\zh-CN.yml 将代码修改如下： 1234567891011121314menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益 404 technique: 技术 nonsense: 胡言乱语 anime: 动画 design: 设计 8.2 更改文章结尾跳转上一篇与下一篇顺序NexT 默认的文章结尾调准顺序是按照时间顺序，即时间上后创建的文章为下一篇，这和我们的习惯以及归档的显示顺序并不一致，所以需要我们手动更改一下。 找到文件 /themes/next/layout/_macro/post.swig ，找到对应字段并更改为如下内容： 123456789101112131415161718192021&#123;% if not is_index and (post.prev or post.next) %&#125; &lt;div class="post-nav"&gt; &lt;div class="post-nav-next post-nav-item"&gt; &#123;% if post.prev %&#125; &lt;a href="&#123;&#123; url_for(post.prev.path) &#125;&#125;" rel="prev" title="&#123;&#123; post.prev.title &#125;&#125;"&gt; &lt;i class="fa fa-chevron-left"&gt;&lt;/i&gt; &#123;&#123; post.prev.title &#125;&#125; &lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;span class="post-nav-divider"&gt;&lt;/span&gt; &lt;div class="post-nav-prev post-nav-item"&gt; &#123;% if post.next %&#125; &lt;a href="&#123;&#123; url_for(post.next.path) &#125;&#125;" rel="next" title="&#123;&#123; post.next.title &#125;&#125;"&gt; &#123;&#123; post.next.title &#125;&#125; &lt;i class="fa fa-chevron-right"&gt;&lt;/i&gt; &lt;/a&gt; &#123;% endif %&#125; &lt;/div&gt; &lt;/div&gt;&#123;% endif %&#125; 8.3 点击侧栏头像回到博客首页首先确认头像已正确启用。 打开文件 /themes/next/layout/_macro/sidebar.swig ，在对应的位置添加代码： 12345+ &lt;a href="/"&gt; &lt;img class="site-author-image" itemprop="image" src="&#123;&#123; url_for( theme.avatar | default(theme.images + '/avatar.gif') ) &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125;" /&gt;+ &lt;/a&gt; 8.4 文章摘要图片打开文件 /themes/next/layout/_macro/post.swig ，在对应的位置添加代码： 1234567891011121314151617181920212223242526 &#123;% if is_index %&#125; &#123;% if post.description and theme.excerpt_description %&#125; &#123;&#123; post.description &#125;&#125; &lt;!--noindex--&gt; &lt;div class="post-button text-center"&gt; &lt;a class="btn" href="&#123;&#123; url_for(post.path) &#125;&#125;"&gt; &#123;&#123; __('post.read_more') &#125;&#125; &amp;raquo; &lt;/a&gt; &lt;/div&gt; &lt;!--/noindex--&gt; &#123;% elif post.excerpt %&#125; &#123;&#123; post.excerpt &#125;&#125;+ + &#123;% if post.image %&#125;+ &lt;div class="out-img-topic"&gt;+ &lt;img src=&#123;&#123; post.image &#125;&#125; class="img-topic" /&gt;+ &lt;/div&gt;+ &#123;% endif %&#125;+ &lt;!--noindex--&gt; &lt;div class="post-button text-center"&gt; &lt;a class="btn" href="&#123;&#123; url_for(post.path) &#125;&#125;&#123;% if theme.scroll_to_more %&#125;#&#123;&#123; __('post.more') &#125;&#125;&#123;% endif %&#125;" rel="contents"&gt; &#123;&#123; __('post.read_more') &#125;&#125; &amp;raquo; &lt;/a&gt; &lt;/div&gt; &lt;!--/noindex--&gt; 在需要添加摘要图片的文章 Front-matter （文件最上方以---分隔的区域）处添加一个字段： 1image: # 图片地址 8.5 HEXO POST 模板在前面 8.1 部分，为了将制作独立的分类页，已经接触了 HEXO POST 模板，简单来说就是修改这个模板文件可以让之后所有新建的文章保持某个固定的格式。 这里我继续参考打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 ，对 POST 模板进行修改。 打开文件 /scaffolds/post.md ，修改为如下内容： 12345678910111213---title: &#123;&#123; title &#125;&#125; &lt;!-- 文章标题 --&gt;date: &#123;&#123; date &#125;&#125; &lt;!-- 创建日期 --&gt;tags: &lt;!-- 标签 --&gt;categories: &lt;!-- 分类 --&gt;description: &lt;!-- 文章描述 --&gt;image: &lt;!-- 摘要图片 --&gt;---&lt;p class="description"&gt;&lt;/p&gt;&lt;!-- more --&gt; 8.6 修改文章底部的 Tag 前面的 # 符号打开文件 /themes/next/layout/_macro/post.swig ，将 rel=&quot;tag&quot;&gt;# 改为 rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 即可。 9 结尾这篇文章基本记录了我折腾 Blog 这四个月的点点滴滴，真的是从零基础一点点折腾出来的，感谢文中提到的各位博主的文章，帮到了很多。 一开始折腾的时候是用的 v5.1.4 版本的 NexT 主题，后来发现这不是最新版本，就去找了 v6.7.0 ，直到最后定稿的时候已经在使用 v7.0.0 了。 遗憾的地方大概就是第三方评论系统 Valine 的页面没找到自定义的方法啊，虽然 Valine-Admin 的作者做过一个自定义方案非常不错，但是因为针对的版本是 1.1.4 ，所以我这里一使用就报错啊。 总之就这些，新年的12天假期花了11天在这上面，亲戚朋友少还单身还是有好处的吧（默默流下眼泪）。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Blog 搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fp%2F3eeb.html</url>
    <content type="text"><![CDATA[Hello world 大概每次我学代码都是学到这里就放弃了，然而这次搭博客后写的第一篇标题就用 “hello world” ，好像是宣布自己踏出了第一步一样，其实并没有什么改变啦。 好，大家好，我是雾之。 “想有一个个人网站”，这个念头产生于12年前，到今天总算是做出了这个像点样子的个人博客，真是段漫长的时间啊，可喜可贺可喜可贺。虽然我基本上这12年根本没花多少时间在学习代码上面。 我应该算是那种典型的三分钟热度的人吧，对什么都是快速的感兴趣，快速的入门，然后快速的放弃。结果就是什么都懂一些但是什么都不精，而且因为姑且都算是已经入门了，也就知道了自己懂的那些皮毛根本算不上什么，所以我其实没什么值得拿出来炫耀的技术。 日本动画是个好东西，用来打发时间的话，每季度很多新番可以看，很多原作小说可以读，很多原作游戏、衍生游戏可以玩；用来充实生活的话，每季度很多新歌可以听，每个动画也有很多周边可以买；用来学习姿势的话，可以以此为媒介学习日语、代码、音乐、历史、地理……所以像我这种生活很无趣的人一接触就离不开了，脱宅什么的是不可能的，这辈子都不可能，女朋友又找不到，只能靠发表情包卖萌度日这样子。 正式入宅应该是大一的时候，甩了女朋友之后投入了纸片人的怀抱，现在想想真想回去抽自己一嘴巴。 现在保持着每季度追17部左右的新番，每季度买一张 CD，谈不上喜欢不喜欢，只是习惯了。有时候都觉得自己是不是没救了，只看动画的话可能真的找不到女朋友啊。 其实找女朋友这事我是不怎么着急的，我觉得我还可以耗，我还没到30怕什么！但是谁家里没个催婚的妈呢？我妈对我结婚这件事的态度大概就是大家都熟悉的：这个需求很简单，怎么实现我不管。 &nbsp; 人嘛，是由皮囊和灵魂组成的，美丽的皮囊我自认为是没有的，所以……有趣的灵魂我也是没有的。啊，这里用”所以“是不是不太对啊，但是读起来会更有趣一些所以就不要在意这个细节了。 因为没有有趣的灵魂，所以我一开始玩twitter的时候真的是懵逼的，到底怎么做才会有人看我的 TimeLine 呢？那个时候我想到的自己能拿得出手的特长大概只有”每季度追的番较多”这一个了，于是，发截图吧。很简单的开端，到现在我坚持发了多少年截图了呢？我自己已经不记得了。虽然我也知道我这种边看边发截图的 TimeLine 挺烦人的，但是没办法啊，发习惯了，你们也没人来打我，所以看着烦的各位，自己找找自身的原因吧（被拖走暴打）。 但是啊，这个博客可不是打算搭来发截图的，因为 TimeLine 是流动的，明天的我肯定不会翻我今天的 TimeLine，但是博客是静态的啊，我可不想哪天打开自己的博客，被截图淹没，不知所措，所以这次我要想想其他的东西写到博客里。 其实现在想想写博客对于我来说已经算是一个不小的挑战了，因为 twitter 玩久了写字就习惯限制在140字以内了，现在我自己翻我几年前在贴吧、知乎写的东西都会惊叹：这 ™ 居然是我写的！ 不过挑战归挑战，东西还是写得出来的，因为研究的东西越多越想有个地方大概记录一下，有的东西真的只有在专研的时间点上才能有很多的感悟吧，一但错过了即便是拥有相应的知识也会变得流于表面。 好了就这么多吧，2019年就这么开始了，这个博客也就这么开始记录吧。]]></content>
      <categories>
        <category>胡言乱语</category>
      </categories>
      <tags>
        <tag>第一篇文章</tag>
      </tags>
  </entry>
</search>
